<?php
/**
 * ErrorDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * finAPI RESTful Services
 *
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.81.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ErrorDetails Class Doc Comment
 *
 * @category Class
 * @description Error details
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ErrorDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ErrorDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'message' => 'string',
        'code' => 'string',
        'type' => 'string',
        'multi_step_authentication' => '\Swagger\Client\Model\MultiStepAuthenticationChallenge'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'message' => null,
        'code' => null,
        'type' => null,
        'multi_step_authentication' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'message' => 'message',
        'code' => 'code',
        'type' => 'type',
        'multi_step_authentication' => 'multiStepAuthentication'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'message' => 'setMessage',
        'code' => 'setCode',
        'type' => 'setType',
        'multi_step_authentication' => 'setMultiStepAuthentication'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'message' => 'getMessage',
        'code' => 'getCode',
        'type' => 'getType',
        'multi_step_authentication' => 'getMultiStepAuthentication'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CODE_MISSING_FIELD = 'MISSING_FIELD';
    const CODE_UNKNOWN_ENTITY = 'UNKNOWN_ENTITY';
    const CODE_METHOD_NOT_ALLOWED = 'METHOD_NOT_ALLOWED';
    const CODE_ENTITY_EXISTS = 'ENTITY_EXISTS';
    const CODE_ILLEGAL_ENTITY_STATE = 'ILLEGAL_ENTITY_STATE';
    const CODE_UNEXPECTED_ERROR = 'UNEXPECTED_ERROR';
    const CODE_ILLEGAL_FIELD_VALUE = 'ILLEGAL_FIELD_VALUE';
    const CODE_UNAUTHORIZED_ACCESS = 'UNAUTHORIZED_ACCESS';
    const CODE_BAD_REQUEST = 'BAD_REQUEST';
    const CODE_UNSUPPORTED_ORDER = 'UNSUPPORTED_ORDER';
    const CODE_ILLEGAL_PAGE_SIZE = 'ILLEGAL_PAGE_SIZE';
    const CODE_INVALID_FILTER_OPTIONS = 'INVALID_FILTER_OPTIONS';
    const CODE_TOO_MANY_IDS = 'TOO_MANY_IDS';
    const CODE_BANK_SERVER_REJECTION = 'BANK_SERVER_REJECTION';
    const CODE_IBAN_ONLY_MONEY_TRANSFER_NOT_SUPPORTED = 'IBAN_ONLY_MONEY_TRANSFER_NOT_SUPPORTED';
    const CODE_IBAN_ONLY_DIRECT_DEBIT_NOT_SUPPORTED = 'IBAN_ONLY_DIRECT_DEBIT_NOT_SUPPORTED';
    const CODE_COLLECTIVE_MONEY_TRANSFER_NOT_SUPPORTED = 'COLLECTIVE_MONEY_TRANSFER_NOT_SUPPORTED';
    const CODE_INVALID_TWO_STEP_PROCEDURE = 'INVALID_TWO_STEP_PROCEDURE';
    const CODE_MISSING_TWO_STEP_PROCEDURE = 'MISSING_TWO_STEP_PROCEDURE';
    const CODE_UNSUPPORTED_MEDIA_TYPE = 'UNSUPPORTED_MEDIA_TYPE';
    const CODE_UNSUPPORTED_BANK = 'UNSUPPORTED_BANK';
    const CODE_USER_NOT_VERIFIED = 'USER_NOT_VERIFIED';
    const CODE_USER_ALREADY_VERIFIED = 'USER_ALREADY_VERIFIED';
    const CODE_INVALID_TOKEN = 'INVALID_TOKEN';
    const CODE_LOCKED = 'LOCKED';
    const CODE_NO_ACCOUNTS_FOR_TYPE_LIST = 'NO_ACCOUNTS_FOR_TYPE_LIST';
    const CODE_FORBIDDEN = 'FORBIDDEN';
    const CODE_NO_EXISTING_CHALLENGE = 'NO_EXISTING_CHALLENGE';
    const CODE_ADDITIONAL_AUTHENTICATION_REQUIRED = 'ADDITIONAL_AUTHENTICATION_REQUIRED';
    const CODE_WEB_FORM_REQUIRED = 'WEB_FORM_REQUIRED';
    const CODE_WEB_FORM_ABORTED = 'WEB_FORM_ABORTED';
    const CODE_INVALID_CONSENT = 'INVALID_CONSENT';
    const CODE_NO_CERTIFICATE = 'NO_CERTIFICATE';
    const CODE_NO_TPP_CLIENT_CREDENTIALS = 'NO_TPP_CLIENT_CREDENTIALS';
    const TYPE_BUSINESS = 'BUSINESS';
    const TYPE_TECHNICAL = 'TECHNICAL';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodeAllowableValues()
    {
        return [
            self::CODE_MISSING_FIELD,
            self::CODE_UNKNOWN_ENTITY,
            self::CODE_METHOD_NOT_ALLOWED,
            self::CODE_ENTITY_EXISTS,
            self::CODE_ILLEGAL_ENTITY_STATE,
            self::CODE_UNEXPECTED_ERROR,
            self::CODE_ILLEGAL_FIELD_VALUE,
            self::CODE_UNAUTHORIZED_ACCESS,
            self::CODE_BAD_REQUEST,
            self::CODE_UNSUPPORTED_ORDER,
            self::CODE_ILLEGAL_PAGE_SIZE,
            self::CODE_INVALID_FILTER_OPTIONS,
            self::CODE_TOO_MANY_IDS,
            self::CODE_BANK_SERVER_REJECTION,
            self::CODE_IBAN_ONLY_MONEY_TRANSFER_NOT_SUPPORTED,
            self::CODE_IBAN_ONLY_DIRECT_DEBIT_NOT_SUPPORTED,
            self::CODE_COLLECTIVE_MONEY_TRANSFER_NOT_SUPPORTED,
            self::CODE_INVALID_TWO_STEP_PROCEDURE,
            self::CODE_MISSING_TWO_STEP_PROCEDURE,
            self::CODE_UNSUPPORTED_MEDIA_TYPE,
            self::CODE_UNSUPPORTED_BANK,
            self::CODE_USER_NOT_VERIFIED,
            self::CODE_USER_ALREADY_VERIFIED,
            self::CODE_INVALID_TOKEN,
            self::CODE_LOCKED,
            self::CODE_NO_ACCOUNTS_FOR_TYPE_LIST,
            self::CODE_FORBIDDEN,
            self::CODE_NO_EXISTING_CHALLENGE,
            self::CODE_ADDITIONAL_AUTHENTICATION_REQUIRED,
            self::CODE_WEB_FORM_REQUIRED,
            self::CODE_WEB_FORM_ABORTED,
            self::CODE_INVALID_CONSENT,
            self::CODE_NO_CERTIFICATE,
            self::CODE_NO_TPP_CLIENT_CREDENTIALS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_BUSINESS,
            self::TYPE_TECHNICAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['multi_step_authentication'] = isset($data['multi_step_authentication']) ? $data['multi_step_authentication'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($this->container['code']) && !in_array($this->container['code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message Error message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Error code. See the documentation of the individual services for details about what values may be returned.
     *
     * @return $this
     */
    public function setCode($code)
    {
        $allowedValues = $this->getCodeAllowableValues();
        if (!in_array($code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Error type. BUSINESS errors depict German error messages for the user, e.g. from a bank server. TECHNICAL errors depict internal errors.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets multi_step_authentication
     *
     * @return \Swagger\Client\Model\MultiStepAuthenticationChallenge
     */
    public function getMultiStepAuthentication()
    {
        return $this->container['multi_step_authentication'];
    }

    /**
     * Sets multi_step_authentication
     *
     * @param \Swagger\Client\Model\MultiStepAuthenticationChallenge $multi_step_authentication This field is set when a multi-step authentication is required, i.e. when you need to repeat the original service call and provide additional data. The field contains information about what additional data is required.
     *
     * @return $this
     */
    public function setMultiStepAuthentication($multi_step_authentication)
    {
        $this->container['multi_step_authentication'] = $multi_step_authentication;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


