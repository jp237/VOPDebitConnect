<?php
/**
 * UserInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * finAPI RESTful Services
 *
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.81.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UserInfo Class Doc Comment
 *
 * @category Class
 * @description Container for user information
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'user_id' => 'string',
        'registration_date' => 'string',
        'deletion_date' => 'string',
        'last_active_date' => 'string',
        'bank_connection_count' => 'int',
        'latest_bank_connection_import_date' => 'string',
        'latest_bank_connection_deletion_date' => 'string',
        'monthly_stats' => '\Swagger\Client\Model\MonthlyUserStats[]',
        'is_locked' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'user_id' => null,
        'registration_date' => null,
        'deletion_date' => null,
        'last_active_date' => null,
        'bank_connection_count' => 'int32',
        'latest_bank_connection_import_date' => null,
        'latest_bank_connection_deletion_date' => null,
        'monthly_stats' => null,
        'is_locked' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_id' => 'userId',
        'registration_date' => 'registrationDate',
        'deletion_date' => 'deletionDate',
        'last_active_date' => 'lastActiveDate',
        'bank_connection_count' => 'bankConnectionCount',
        'latest_bank_connection_import_date' => 'latestBankConnectionImportDate',
        'latest_bank_connection_deletion_date' => 'latestBankConnectionDeletionDate',
        'monthly_stats' => 'monthlyStats',
        'is_locked' => 'isLocked'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_id' => 'setUserId',
        'registration_date' => 'setRegistrationDate',
        'deletion_date' => 'setDeletionDate',
        'last_active_date' => 'setLastActiveDate',
        'bank_connection_count' => 'setBankConnectionCount',
        'latest_bank_connection_import_date' => 'setLatestBankConnectionImportDate',
        'latest_bank_connection_deletion_date' => 'setLatestBankConnectionDeletionDate',
        'monthly_stats' => 'setMonthlyStats',
        'is_locked' => 'setIsLocked'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_id' => 'getUserId',
        'registration_date' => 'getRegistrationDate',
        'deletion_date' => 'getDeletionDate',
        'last_active_date' => 'getLastActiveDate',
        'bank_connection_count' => 'getBankConnectionCount',
        'latest_bank_connection_import_date' => 'getLatestBankConnectionImportDate',
        'latest_bank_connection_deletion_date' => 'getLatestBankConnectionDeletionDate',
        'monthly_stats' => 'getMonthlyStats',
        'is_locked' => 'getIsLocked'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['registration_date'] = isset($data['registration_date']) ? $data['registration_date'] : null;
        $this->container['deletion_date'] = isset($data['deletion_date']) ? $data['deletion_date'] : null;
        $this->container['last_active_date'] = isset($data['last_active_date']) ? $data['last_active_date'] : null;
        $this->container['bank_connection_count'] = isset($data['bank_connection_count']) ? $data['bank_connection_count'] : null;
        $this->container['latest_bank_connection_import_date'] = isset($data['latest_bank_connection_import_date']) ? $data['latest_bank_connection_import_date'] : null;
        $this->container['latest_bank_connection_deletion_date'] = isset($data['latest_bank_connection_deletion_date']) ? $data['latest_bank_connection_deletion_date'] : null;
        $this->container['monthly_stats'] = isset($data['monthly_stats']) ? $data['monthly_stats'] : null;
        $this->container['is_locked'] = isset($data['is_locked']) ? $data['is_locked'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['registration_date'] === null) {
            $invalidProperties[] = "'registration_date' can't be null";
        }
        if ($this->container['bank_connection_count'] === null) {
            $invalidProperties[] = "'bank_connection_count' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id User's identifier
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets registration_date
     *
     * @return string
     */
    public function getRegistrationDate()
    {
        return $this->container['registration_date'];
    }

    /**
     * Sets registration_date
     *
     * @param string $registration_date User's registration date, in the format 'YYYY-MM-DD'
     *
     * @return $this
     */
    public function setRegistrationDate($registration_date)
    {
        $this->container['registration_date'] = $registration_date;

        return $this;
    }

    /**
     * Gets deletion_date
     *
     * @return string
     */
    public function getDeletionDate()
    {
        return $this->container['deletion_date'];
    }

    /**
     * Sets deletion_date
     *
     * @param string $deletion_date User's deletion date, in the format 'YYYY-MM-DD'. May be null if the user has not been deleted.
     *
     * @return $this
     */
    public function setDeletionDate($deletion_date)
    {
        $this->container['deletion_date'] = $deletion_date;

        return $this;
    }

    /**
     * Gets last_active_date
     *
     * @return string
     */
    public function getLastActiveDate()
    {
        return $this->container['last_active_date'];
    }

    /**
     * Sets last_active_date
     *
     * @param string $last_active_date User's last active date, in the format 'YYYY-MM-DD'. May be null if the user has not yet logged in.
     *
     * @return $this
     */
    public function setLastActiveDate($last_active_date)
    {
        $this->container['last_active_date'] = $last_active_date;

        return $this;
    }

    /**
     * Gets bank_connection_count
     *
     * @return int
     */
    public function getBankConnectionCount()
    {
        return $this->container['bank_connection_count'];
    }

    /**
     * Sets bank_connection_count
     *
     * @param int $bank_connection_count Number of bank connections that currently exist for this user.
     *
     * @return $this
     */
    public function setBankConnectionCount($bank_connection_count)
    {
        $this->container['bank_connection_count'] = $bank_connection_count;

        return $this;
    }

    /**
     * Gets latest_bank_connection_import_date
     *
     * @return string
     */
    public function getLatestBankConnectionImportDate()
    {
        return $this->container['latest_bank_connection_import_date'];
    }

    /**
     * Sets latest_bank_connection_import_date
     *
     * @param string $latest_bank_connection_import_date Latest date of when a bank connection was imported for this user, in the format 'YYYY-MM-DD'. This field is null when there has never been a bank connection import.
     *
     * @return $this
     */
    public function setLatestBankConnectionImportDate($latest_bank_connection_import_date)
    {
        $this->container['latest_bank_connection_import_date'] = $latest_bank_connection_import_date;

        return $this;
    }

    /**
     * Gets latest_bank_connection_deletion_date
     *
     * @return string
     */
    public function getLatestBankConnectionDeletionDate()
    {
        return $this->container['latest_bank_connection_deletion_date'];
    }

    /**
     * Sets latest_bank_connection_deletion_date
     *
     * @param string $latest_bank_connection_deletion_date Latest date of when a bank connection was deleted for this user, in the format 'YYYY-MM-DD'. This field is null when there has never been a bank connection deletion.
     *
     * @return $this
     */
    public function setLatestBankConnectionDeletionDate($latest_bank_connection_deletion_date)
    {
        $this->container['latest_bank_connection_deletion_date'] = $latest_bank_connection_deletion_date;

        return $this;
    }

    /**
     * Gets monthly_stats
     *
     * @return \Swagger\Client\Model\MonthlyUserStats[]
     */
    public function getMonthlyStats()
    {
        return $this->container['monthly_stats'];
    }

    /**
     * Sets monthly_stats
     *
     * @param \Swagger\Client\Model\MonthlyUserStats[] $monthly_stats Additional information about the user's data or activities, broken down in months. The list will by default contain an entry for each month starting with the month of when the user was registered, up to the current month. The date range may vary when you have limited it in the request. <br/><br/>Please note:<br/>&bull; this field is only set when 'includeMonthlyStats' = true, otherwise it will be null.<br/>&bull; the list is always ordered from the latest month first, to the oldest month last.<br/>&bull; the list will never contain an entry for a month that was prior to the month of when the user was registered, or after the month of when the user was deleted, even when you have explicitly set a respective date range. This means that the list may be empty if you are requesting a date range where the user didn't exist yet, or didn't exist any longer.
     *
     * @return $this
     */
    public function setMonthlyStats($monthly_stats)
    {
        $this->container['monthly_stats'] = $monthly_stats;

        return $this;
    }

    /**
     * Gets is_locked
     *
     * @return bool
     */
    public function getIsLocked()
    {
        return $this->container['is_locked'];
    }

    /**
     * Sets is_locked
     *
     * @param bool $is_locked Whether the user is currently locked (for further information, see the 'maxUserLoginAttempts' setting in your client's configuration). Note that deleted users will always have this field set to 'false'.
     *
     * @return $this
     */
    public function setIsLocked($is_locked)
    {
        $this->container['is_locked'] = $is_locked;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


