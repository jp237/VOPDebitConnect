<?php
/**
 * Transaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * finAPI RESTful Services
 *
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.81.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @description Container for a transaction&#39;s data
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Transaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'parent_id' => 'int',
        'account_id' => 'int',
        'value_date' => 'string',
        'bank_booking_date' => 'string',
        'finapi_booking_date' => 'string',
        'amount' => 'float',
        'purpose' => 'string',
        'counterpart_name' => 'string',
        'counterpart_account_number' => 'string',
        'counterpart_iban' => 'string',
        'counterpart_blz' => 'string',
        'counterpart_bic' => 'string',
        'counterpart_bank_name' => 'string',
        'counterpart_mandate_reference' => 'string',
        'counterpart_customer_reference' => 'string',
        'counterpart_creditor_id' => 'string',
        'counterpart_debitor_id' => 'string',
        'type' => 'string',
        'type_code_zka' => 'string',
        'type_code_swift' => 'string',
        'sepa_purpose_code' => 'string',
        'primanota' => 'string',
        'category' => '\Swagger\Client\Model\Category',
        'labels' => '\Swagger\Client\Model\Label[]',
        'is_potential_duplicate' => 'bool',
        'is_adjusting_entry' => 'bool',
        'is_new' => 'bool',
        'import_date' => 'string',
        'children' => 'int[]',
        'paypal_data' => '\Swagger\Client\Model\PaypalTransactionData',
        'end_to_end_reference' => 'string',
        'compensation_amount' => 'float',
        'original_amount' => 'float',
        'different_debitor' => 'string',
        'different_creditor' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'parent_id' => 'int64',
        'account_id' => 'int64',
        'value_date' => null,
        'bank_booking_date' => null,
        'finapi_booking_date' => null,
        'amount' => null,
        'purpose' => null,
        'counterpart_name' => null,
        'counterpart_account_number' => null,
        'counterpart_iban' => null,
        'counterpart_blz' => null,
        'counterpart_bic' => null,
        'counterpart_bank_name' => null,
        'counterpart_mandate_reference' => null,
        'counterpart_customer_reference' => null,
        'counterpart_creditor_id' => null,
        'counterpart_debitor_id' => null,
        'type' => null,
        'type_code_zka' => null,
        'type_code_swift' => null,
        'sepa_purpose_code' => null,
        'primanota' => null,
        'category' => null,
        'labels' => null,
        'is_potential_duplicate' => null,
        'is_adjusting_entry' => null,
        'is_new' => null,
        'import_date' => null,
        'children' => 'int64',
        'paypal_data' => null,
        'end_to_end_reference' => null,
        'compensation_amount' => null,
        'original_amount' => null,
        'different_debitor' => null,
        'different_creditor' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'parent_id' => 'parentId',
        'account_id' => 'accountId',
        'value_date' => 'valueDate',
        'bank_booking_date' => 'bankBookingDate',
        'finapi_booking_date' => 'finapiBookingDate',
        'amount' => 'amount',
        'purpose' => 'purpose',
        'counterpart_name' => 'counterpartName',
        'counterpart_account_number' => 'counterpartAccountNumber',
        'counterpart_iban' => 'counterpartIban',
        'counterpart_blz' => 'counterpartBlz',
        'counterpart_bic' => 'counterpartBic',
        'counterpart_bank_name' => 'counterpartBankName',
        'counterpart_mandate_reference' => 'counterpartMandateReference',
        'counterpart_customer_reference' => 'counterpartCustomerReference',
        'counterpart_creditor_id' => 'counterpartCreditorId',
        'counterpart_debitor_id' => 'counterpartDebitorId',
        'type' => 'type',
        'type_code_zka' => 'typeCodeZka',
        'type_code_swift' => 'typeCodeSwift',
        'sepa_purpose_code' => 'sepaPurposeCode',
        'primanota' => 'primanota',
        'category' => 'category',
        'labels' => 'labels',
        'is_potential_duplicate' => 'isPotentialDuplicate',
        'is_adjusting_entry' => 'isAdjustingEntry',
        'is_new' => 'isNew',
        'import_date' => 'importDate',
        'children' => 'children',
        'paypal_data' => 'paypalData',
        'end_to_end_reference' => 'endToEndReference',
        'compensation_amount' => 'compensationAmount',
        'original_amount' => 'originalAmount',
        'different_debitor' => 'differentDebitor',
        'different_creditor' => 'differentCreditor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'parent_id' => 'setParentId',
        'account_id' => 'setAccountId',
        'value_date' => 'setValueDate',
        'bank_booking_date' => 'setBankBookingDate',
        'finapi_booking_date' => 'setFinapiBookingDate',
        'amount' => 'setAmount',
        'purpose' => 'setPurpose',
        'counterpart_name' => 'setCounterpartName',
        'counterpart_account_number' => 'setCounterpartAccountNumber',
        'counterpart_iban' => 'setCounterpartIban',
        'counterpart_blz' => 'setCounterpartBlz',
        'counterpart_bic' => 'setCounterpartBic',
        'counterpart_bank_name' => 'setCounterpartBankName',
        'counterpart_mandate_reference' => 'setCounterpartMandateReference',
        'counterpart_customer_reference' => 'setCounterpartCustomerReference',
        'counterpart_creditor_id' => 'setCounterpartCreditorId',
        'counterpart_debitor_id' => 'setCounterpartDebitorId',
        'type' => 'setType',
        'type_code_zka' => 'setTypeCodeZka',
        'type_code_swift' => 'setTypeCodeSwift',
        'sepa_purpose_code' => 'setSepaPurposeCode',
        'primanota' => 'setPrimanota',
        'category' => 'setCategory',
        'labels' => 'setLabels',
        'is_potential_duplicate' => 'setIsPotentialDuplicate',
        'is_adjusting_entry' => 'setIsAdjustingEntry',
        'is_new' => 'setIsNew',
        'import_date' => 'setImportDate',
        'children' => 'setChildren',
        'paypal_data' => 'setPaypalData',
        'end_to_end_reference' => 'setEndToEndReference',
        'compensation_amount' => 'setCompensationAmount',
        'original_amount' => 'setOriginalAmount',
        'different_debitor' => 'setDifferentDebitor',
        'different_creditor' => 'setDifferentCreditor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'parent_id' => 'getParentId',
        'account_id' => 'getAccountId',
        'value_date' => 'getValueDate',
        'bank_booking_date' => 'getBankBookingDate',
        'finapi_booking_date' => 'getFinapiBookingDate',
        'amount' => 'getAmount',
        'purpose' => 'getPurpose',
        'counterpart_name' => 'getCounterpartName',
        'counterpart_account_number' => 'getCounterpartAccountNumber',
        'counterpart_iban' => 'getCounterpartIban',
        'counterpart_blz' => 'getCounterpartBlz',
        'counterpart_bic' => 'getCounterpartBic',
        'counterpart_bank_name' => 'getCounterpartBankName',
        'counterpart_mandate_reference' => 'getCounterpartMandateReference',
        'counterpart_customer_reference' => 'getCounterpartCustomerReference',
        'counterpart_creditor_id' => 'getCounterpartCreditorId',
        'counterpart_debitor_id' => 'getCounterpartDebitorId',
        'type' => 'getType',
        'type_code_zka' => 'getTypeCodeZka',
        'type_code_swift' => 'getTypeCodeSwift',
        'sepa_purpose_code' => 'getSepaPurposeCode',
        'primanota' => 'getPrimanota',
        'category' => 'getCategory',
        'labels' => 'getLabels',
        'is_potential_duplicate' => 'getIsPotentialDuplicate',
        'is_adjusting_entry' => 'getIsAdjustingEntry',
        'is_new' => 'getIsNew',
        'import_date' => 'getImportDate',
        'children' => 'getChildren',
        'paypal_data' => 'getPaypalData',
        'end_to_end_reference' => 'getEndToEndReference',
        'compensation_amount' => 'getCompensationAmount',
        'original_amount' => 'getOriginalAmount',
        'different_debitor' => 'getDifferentDebitor',
        'different_creditor' => 'getDifferentCreditor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['value_date'] = isset($data['value_date']) ? $data['value_date'] : null;
        $this->container['bank_booking_date'] = isset($data['bank_booking_date']) ? $data['bank_booking_date'] : null;
        $this->container['finapi_booking_date'] = isset($data['finapi_booking_date']) ? $data['finapi_booking_date'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['purpose'] = isset($data['purpose']) ? $data['purpose'] : null;
        $this->container['counterpart_name'] = isset($data['counterpart_name']) ? $data['counterpart_name'] : null;
        $this->container['counterpart_account_number'] = isset($data['counterpart_account_number']) ? $data['counterpart_account_number'] : null;
        $this->container['counterpart_iban'] = isset($data['counterpart_iban']) ? $data['counterpart_iban'] : null;
        $this->container['counterpart_blz'] = isset($data['counterpart_blz']) ? $data['counterpart_blz'] : null;
        $this->container['counterpart_bic'] = isset($data['counterpart_bic']) ? $data['counterpart_bic'] : null;
        $this->container['counterpart_bank_name'] = isset($data['counterpart_bank_name']) ? $data['counterpart_bank_name'] : null;
        $this->container['counterpart_mandate_reference'] = isset($data['counterpart_mandate_reference']) ? $data['counterpart_mandate_reference'] : null;
        $this->container['counterpart_customer_reference'] = isset($data['counterpart_customer_reference']) ? $data['counterpart_customer_reference'] : null;
        $this->container['counterpart_creditor_id'] = isset($data['counterpart_creditor_id']) ? $data['counterpart_creditor_id'] : null;
        $this->container['counterpart_debitor_id'] = isset($data['counterpart_debitor_id']) ? $data['counterpart_debitor_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['type_code_zka'] = isset($data['type_code_zka']) ? $data['type_code_zka'] : null;
        $this->container['type_code_swift'] = isset($data['type_code_swift']) ? $data['type_code_swift'] : null;
        $this->container['sepa_purpose_code'] = isset($data['sepa_purpose_code']) ? $data['sepa_purpose_code'] : null;
        $this->container['primanota'] = isset($data['primanota']) ? $data['primanota'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['is_potential_duplicate'] = isset($data['is_potential_duplicate']) ? $data['is_potential_duplicate'] : null;
        $this->container['is_adjusting_entry'] = isset($data['is_adjusting_entry']) ? $data['is_adjusting_entry'] : null;
        $this->container['is_new'] = isset($data['is_new']) ? $data['is_new'] : null;
        $this->container['import_date'] = isset($data['import_date']) ? $data['import_date'] : null;
        $this->container['children'] = isset($data['children']) ? $data['children'] : null;
        $this->container['paypal_data'] = isset($data['paypal_data']) ? $data['paypal_data'] : null;
        $this->container['end_to_end_reference'] = isset($data['end_to_end_reference']) ? $data['end_to_end_reference'] : null;
        $this->container['compensation_amount'] = isset($data['compensation_amount']) ? $data['compensation_amount'] : null;
        $this->container['original_amount'] = isset($data['original_amount']) ? $data['original_amount'] : null;
        $this->container['different_debitor'] = isset($data['different_debitor']) ? $data['different_debitor'] : null;
        $this->container['different_creditor'] = isset($data['different_creditor']) ? $data['different_creditor'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['value_date'] === null) {
            $invalidProperties[] = "'value_date' can't be null";
        }
        if ($this->container['bank_booking_date'] === null) {
            $invalidProperties[] = "'bank_booking_date' can't be null";
        }
        if ($this->container['finapi_booking_date'] === null) {
            $invalidProperties[] = "'finapi_booking_date' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['is_potential_duplicate'] === null) {
            $invalidProperties[] = "'is_potential_duplicate' can't be null";
        }
        if ($this->container['is_adjusting_entry'] === null) {
            $invalidProperties[] = "'is_adjusting_entry' can't be null";
        }
        if ($this->container['is_new'] === null) {
            $invalidProperties[] = "'is_new' can't be null";
        }
        if ($this->container['import_date'] === null) {
            $invalidProperties[] = "'import_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Transaction identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int $parent_id Parent transaction identifier
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id Account identifier
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets value_date
     *
     * @return string
     */
    public function getValueDate()
    {
        return $this->container['value_date'];
    }

    /**
     * Sets value_date
     *
     * @param string $value_date Value date in the format 'YYYY-MM-DD HH:MM:SS.SSS' (german time).
     *
     * @return $this
     */
    public function setValueDate($value_date)
    {
        $this->container['value_date'] = $value_date;

        return $this;
    }

    /**
     * Gets bank_booking_date
     *
     * @return string
     */
    public function getBankBookingDate()
    {
        return $this->container['bank_booking_date'];
    }

    /**
     * Sets bank_booking_date
     *
     * @param string $bank_booking_date Bank booking date in the format 'YYYY-MM-DD HH:MM:SS.SSS' (german time).
     *
     * @return $this
     */
    public function setBankBookingDate($bank_booking_date)
    {
        $this->container['bank_booking_date'] = $bank_booking_date;

        return $this;
    }

    /**
     * Gets finapi_booking_date
     *
     * @return string
     */
    public function getFinapiBookingDate()
    {
        return $this->container['finapi_booking_date'];
    }

    /**
     * Sets finapi_booking_date
     *
     * @param string $finapi_booking_date finAPI Booking date in the format 'YYYY-MM-DD HH:MM:SS.SSS' (german time). NOTE: In some cases, banks may deliver transactions that are booked in future, but already included in the current account balance. To keep the account balance consistent with the set of transactions, such \"future transactions\" will be imported with their finapiBookingDate set to the current date (i.e.: date of import). The finapiBookingDate will automatically get adjusted towards the bankBookingDate each time the associated bank account is updated. Example: A transaction is imported on July, 3rd, with a bank reported booking date of July, 6th. The transaction will be imported with its finapiBookingDate set to July, 3rd. Then, on July 4th, the associated account is updated. During this update, the transaction's finapiBookingDate will be automatically adjusted to July 4th. This adjustment of the finapiBookingDate takes place on each update until the bank account is updated on July 6th or later, in which case the transaction's finapiBookingDate will be adjusted to its final value, July 6th.<br/> The finapiBookingDate is the date that is used by the finAPI PFM services. E.g. when you calculate the spendings of an account for the current month, and have a transaction with finapiBookingDate in the current month but bankBookingDate at the beginning of the next month, then this transaction is included in the calculations (as the bank has this transaction's amount included in the current account balance as well).
     *
     * @return $this
     */
    public function setFinapiBookingDate($finapi_booking_date)
    {
        $this->container['finapi_booking_date'] = $finapi_booking_date;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Transaction amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets purpose
     *
     * @return string
     */
    public function getPurpose()
    {
        return $this->container['purpose'];
    }

    /**
     * Sets purpose
     *
     * @param string $purpose Transaction purpose. Maximum length: 2000
     *
     * @return $this
     */
    public function setPurpose($purpose)
    {
        $this->container['purpose'] = $purpose;

        return $this;
    }

    /**
     * Gets counterpart_name
     *
     * @return string
     */
    public function getCounterpartName()
    {
        return $this->container['counterpart_name'];
    }

    /**
     * Sets counterpart_name
     *
     * @param string $counterpart_name Counterpart name. Maximum length: 80
     *
     * @return $this
     */
    public function setCounterpartName($counterpart_name)
    {
        $this->container['counterpart_name'] = $counterpart_name;

        return $this;
    }

    /**
     * Gets counterpart_account_number
     *
     * @return string
     */
    public function getCounterpartAccountNumber()
    {
        return $this->container['counterpart_account_number'];
    }

    /**
     * Sets counterpart_account_number
     *
     * @param string $counterpart_account_number Counterpart account number
     *
     * @return $this
     */
    public function setCounterpartAccountNumber($counterpart_account_number)
    {
        $this->container['counterpart_account_number'] = $counterpart_account_number;

        return $this;
    }

    /**
     * Gets counterpart_iban
     *
     * @return string
     */
    public function getCounterpartIban()
    {
        return $this->container['counterpart_iban'];
    }

    /**
     * Sets counterpart_iban
     *
     * @param string $counterpart_iban Counterpart IBAN
     *
     * @return $this
     */
    public function setCounterpartIban($counterpart_iban)
    {
        $this->container['counterpart_iban'] = $counterpart_iban;

        return $this;
    }

    /**
     * Gets counterpart_blz
     *
     * @return string
     */
    public function getCounterpartBlz()
    {
        return $this->container['counterpart_blz'];
    }

    /**
     * Sets counterpart_blz
     *
     * @param string $counterpart_blz Counterpart BLZ
     *
     * @return $this
     */
    public function setCounterpartBlz($counterpart_blz)
    {
        $this->container['counterpart_blz'] = $counterpart_blz;

        return $this;
    }

    /**
     * Gets counterpart_bic
     *
     * @return string
     */
    public function getCounterpartBic()
    {
        return $this->container['counterpart_bic'];
    }

    /**
     * Sets counterpart_bic
     *
     * @param string $counterpart_bic Counterpart BIC
     *
     * @return $this
     */
    public function setCounterpartBic($counterpart_bic)
    {
        $this->container['counterpart_bic'] = $counterpart_bic;

        return $this;
    }

    /**
     * Gets counterpart_bank_name
     *
     * @return string
     */
    public function getCounterpartBankName()
    {
        return $this->container['counterpart_bank_name'];
    }

    /**
     * Sets counterpart_bank_name
     *
     * @param string $counterpart_bank_name Counterpart Bank name
     *
     * @return $this
     */
    public function setCounterpartBankName($counterpart_bank_name)
    {
        $this->container['counterpart_bank_name'] = $counterpart_bank_name;

        return $this;
    }

    /**
     * Gets counterpart_mandate_reference
     *
     * @return string
     */
    public function getCounterpartMandateReference()
    {
        return $this->container['counterpart_mandate_reference'];
    }

    /**
     * Sets counterpart_mandate_reference
     *
     * @param string $counterpart_mandate_reference The mandate reference of the counterpart
     *
     * @return $this
     */
    public function setCounterpartMandateReference($counterpart_mandate_reference)
    {
        $this->container['counterpart_mandate_reference'] = $counterpart_mandate_reference;

        return $this;
    }

    /**
     * Gets counterpart_customer_reference
     *
     * @return string
     */
    public function getCounterpartCustomerReference()
    {
        return $this->container['counterpart_customer_reference'];
    }

    /**
     * Sets counterpart_customer_reference
     *
     * @param string $counterpart_customer_reference The customer reference of the counterpart
     *
     * @return $this
     */
    public function setCounterpartCustomerReference($counterpart_customer_reference)
    {
        $this->container['counterpart_customer_reference'] = $counterpart_customer_reference;

        return $this;
    }

    /**
     * Gets counterpart_creditor_id
     *
     * @return string
     */
    public function getCounterpartCreditorId()
    {
        return $this->container['counterpart_creditor_id'];
    }

    /**
     * Sets counterpart_creditor_id
     *
     * @param string $counterpart_creditor_id The creditor ID of the counterpart. Exists only for SEPA direct debit transactions (\"Lastschrift\").
     *
     * @return $this
     */
    public function setCounterpartCreditorId($counterpart_creditor_id)
    {
        $this->container['counterpart_creditor_id'] = $counterpart_creditor_id;

        return $this;
    }

    /**
     * Gets counterpart_debitor_id
     *
     * @return string
     */
    public function getCounterpartDebitorId()
    {
        return $this->container['counterpart_debitor_id'];
    }

    /**
     * Sets counterpart_debitor_id
     *
     * @param string $counterpart_debitor_id The originator's identification code. Exists only for SEPA money transfer transactions (\"Überweisung\").
     *
     * @return $this
     */
    public function setCounterpartDebitorId($counterpart_debitor_id)
    {
        $this->container['counterpart_debitor_id'] = $counterpart_debitor_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Transaction type, according to the bank. If set, this will contain a German term that you can display to the user. Some examples of common values are: \"Lastschrift\", \"Auslands&uuml;berweisung\", \"Geb&uuml;hren\", \"Zinsen\". The maximum possible length of this field is 255 characters.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets type_code_zka
     *
     * @return string
     */
    public function getTypeCodeZka()
    {
        return $this->container['type_code_zka'];
    }

    /**
     * Sets type_code_zka
     *
     * @param string $type_code_zka ZKA business transaction code which relates to the transaction's type. Possible values range from 1 through 999. If no information about the ZKA type code is available, then this field will be null.
     *
     * @return $this
     */
    public function setTypeCodeZka($type_code_zka)
    {
        $this->container['type_code_zka'] = $type_code_zka;

        return $this;
    }

    /**
     * Gets type_code_swift
     *
     * @return string
     */
    public function getTypeCodeSwift()
    {
        return $this->container['type_code_swift'];
    }

    /**
     * Sets type_code_swift
     *
     * @param string $type_code_swift SWIFT transaction type code. If no information about the SWIFT code is available, then this field will be null.
     *
     * @return $this
     */
    public function setTypeCodeSwift($type_code_swift)
    {
        $this->container['type_code_swift'] = $type_code_swift;

        return $this;
    }

    /**
     * Gets sepa_purpose_code
     *
     * @return string
     */
    public function getSepaPurposeCode()
    {
        return $this->container['sepa_purpose_code'];
    }

    /**
     * Sets sepa_purpose_code
     *
     * @param string $sepa_purpose_code SEPA purpose code, according to ISO 20022
     *
     * @return $this
     */
    public function setSepaPurposeCode($sepa_purpose_code)
    {
        $this->container['sepa_purpose_code'] = $sepa_purpose_code;

        return $this;
    }

    /**
     * Gets primanota
     *
     * @return string
     */
    public function getPrimanota()
    {
        return $this->container['primanota'];
    }

    /**
     * Sets primanota
     *
     * @param string $primanota Transaction primanota (bank side identification number)
     *
     * @return $this
     */
    public function setPrimanota($primanota)
    {
        $this->container['primanota'] = $primanota;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \Swagger\Client\Model\Category
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \Swagger\Client\Model\Category $category Transaction category, if any is assigned. Note: Recently imported transactions that have currently no category assigned might still get categorized by the background categorization process. To check the status of the background categorization, see GET /bankConnections. Manual category assignments to a transaction will remove the transaction from the background categorization process (i.e. the background categorization process will never overwrite a manual category assignment).
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \Swagger\Client\Model\Label[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \Swagger\Client\Model\Label[] $labels Array of assigned labels
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets is_potential_duplicate
     *
     * @return bool
     */
    public function getIsPotentialDuplicate()
    {
        return $this->container['is_potential_duplicate'];
    }

    /**
     * Sets is_potential_duplicate
     *
     * @param bool $is_potential_duplicate While finAPI uses a well-elaborated algorithm for uniquely identifying transactions, there is still the possibility that during an account update, a transaction that was imported previously may be imported a second time as a new transaction. For example, this can happen if some transaction data changes on the bank server side. However, finAPI also includes an algorithm of identifying such \"potential duplicate\" transactions. If this field is set to true, it means that finAPI detected a similar transaction that might actually be the same. It is recommended to communicate this information to the end user, and give him an option to delete the transaction in case he confirms that it really is a duplicate.
     *
     * @return $this
     */
    public function setIsPotentialDuplicate($is_potential_duplicate)
    {
        $this->container['is_potential_duplicate'] = $is_potential_duplicate;

        return $this;
    }

    /**
     * Gets is_adjusting_entry
     *
     * @return bool
     */
    public function getIsAdjustingEntry()
    {
        return $this->container['is_adjusting_entry'];
    }

    /**
     * Sets is_adjusting_entry
     *
     * @param bool $is_adjusting_entry Indicating whether this transaction is an adjusting entry ('Zwischensaldo').<br/><br/>Adjusting entries do not originate from the bank, but are added by finAPI during an account update when the bank reported account balance does not add up to the set of transactions that finAPI receives for the account. In this case, the adjusting entry will fix the deviation between the balance and the received transactions so that both adds up again.<br/><br/>Possible causes for such deviations are:<br/>- Inconsistencies in how the bank calculates the balance, for instance when not yet booked transactions are already included in the balance, but not included in the set of transactions<br/>- Gaps in the transaction history that finAPI receives, for instance because the account has not been updated for a while and older transactions are no longer available
     *
     * @return $this
     */
    public function setIsAdjustingEntry($is_adjusting_entry)
    {
        $this->container['is_adjusting_entry'] = $is_adjusting_entry;

        return $this;
    }

    /**
     * Gets is_new
     *
     * @return bool
     */
    public function getIsNew()
    {
        return $this->container['is_new'];
    }

    /**
     * Sets is_new
     *
     * @param bool $is_new Indicating whether this transaction is 'new' or not. Any newly imported transaction will have this flag initially set to true. How you use this field is up to your interpretation. For example, you might want to set it to false once a user has clicked on/seen the transaction. You can change this flag to 'false' with the PATCH method.
     *
     * @return $this
     */
    public function setIsNew($is_new)
    {
        $this->container['is_new'] = $is_new;

        return $this;
    }

    /**
     * Gets import_date
     *
     * @return string
     */
    public function getImportDate()
    {
        return $this->container['import_date'];
    }

    /**
     * Sets import_date
     *
     * @param string $import_date Date of transaction import, in the format 'YYYY-MM-DD HH:MM:SS.SSS' (german time).
     *
     * @return $this
     */
    public function setImportDate($import_date)
    {
        $this->container['import_date'] = $import_date;

        return $this;
    }

    /**
     * Gets children
     *
     * @return int[]
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     *
     * @param int[] $children Sub-transactions identifiers (if this transaction is split)
     *
     * @return $this
     */
    public function setChildren($children)
    {
        $this->container['children'] = $children;

        return $this;
    }

    /**
     * Gets paypal_data
     *
     * @return \Swagger\Client\Model\PaypalTransactionData
     */
    public function getPaypalData()
    {
        return $this->container['paypal_data'];
    }

    /**
     * Sets paypal_data
     *
     * @param \Swagger\Client\Model\PaypalTransactionData $paypal_data Additional, PayPal-specific transaction data. This field is only set for transactions that belong to an account of the 'PayPal' bank (BLZ 'PAYPAL').<br/>NOTE: This field is deprecated as the bank with blz 'PAYPAL' is no longer supported. Do not use this field, as it will be removed at some point.
     *
     * @return $this
     */
    public function setPaypalData($paypal_data)
    {
        $this->container['paypal_data'] = $paypal_data;

        return $this;
    }

    /**
     * Gets end_to_end_reference
     *
     * @return string
     */
    public function getEndToEndReference()
    {
        return $this->container['end_to_end_reference'];
    }

    /**
     * Sets end_to_end_reference
     *
     * @param string $end_to_end_reference End-To-End reference
     *
     * @return $this
     */
    public function setEndToEndReference($end_to_end_reference)
    {
        $this->container['end_to_end_reference'] = $end_to_end_reference;

        return $this;
    }

    /**
     * Gets compensation_amount
     *
     * @return float
     */
    public function getCompensationAmount()
    {
        return $this->container['compensation_amount'];
    }

    /**
     * Sets compensation_amount
     *
     * @param float $compensation_amount Compensation Amount. Sum of reimbursement of out-of-pocket expenses plus processing brokerage in case of a national return / refund debit as well as an optional interest equalisation. Exists predominantly for SEPA direct debit returns.
     *
     * @return $this
     */
    public function setCompensationAmount($compensation_amount)
    {
        $this->container['compensation_amount'] = $compensation_amount;

        return $this;
    }

    /**
     * Gets original_amount
     *
     * @return float
     */
    public function getOriginalAmount()
    {
        return $this->container['original_amount'];
    }

    /**
     * Sets original_amount
     *
     * @param float $original_amount Original Amount of the original direct debit. Exists predominantly for SEPA direct debit returns.
     *
     * @return $this
     */
    public function setOriginalAmount($original_amount)
    {
        $this->container['original_amount'] = $original_amount;

        return $this;
    }

    /**
     * Gets different_debitor
     *
     * @return string
     */
    public function getDifferentDebitor()
    {
        return $this->container['different_debitor'];
    }

    /**
     * Sets different_debitor
     *
     * @param string $different_debitor Payer's/debtor's reference party (in the case of a credit transfer) or payee's/creditor's reference party (in the case of a direct debit)
     *
     * @return $this
     */
    public function setDifferentDebitor($different_debitor)
    {
        $this->container['different_debitor'] = $different_debitor;

        return $this;
    }

    /**
     * Gets different_creditor
     *
     * @return string
     */
    public function getDifferentCreditor()
    {
        return $this->container['different_creditor'];
    }

    /**
     * Sets different_creditor
     *
     * @param string $different_creditor Payee's/creditor's reference party (in the case of a credit transfer) or payer's/debtor's reference party (in the case of a direct debit)
     *
     * @return $this
     */
    public function setDifferentCreditor($different_creditor)
    {
        $this->container['different_creditor'] = $different_creditor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


