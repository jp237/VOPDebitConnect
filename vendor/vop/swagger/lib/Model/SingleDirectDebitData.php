<?php
/**
 * SingleDirectDebitData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * finAPI RESTful Services
 *
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.81.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SingleDirectDebitData Class Doc Comment
 *
 * @category Class
 * @description Data for a single direct debit
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SingleDirectDebitData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SingleDirectDebitData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'debitor_name' => 'string',
        'debitor_iban' => 'string',
        'debitor_bic' => 'string',
        'amount' => 'float',
        'purpose' => 'string',
        'sepa_purpose_code' => 'string',
        'mandate_id' => 'string',
        'mandate_date' => 'string',
        'creditor_id' => 'string',
        'end_to_end_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'debitor_name' => null,
        'debitor_iban' => null,
        'debitor_bic' => null,
        'amount' => null,
        'purpose' => null,
        'sepa_purpose_code' => null,
        'mandate_id' => null,
        'mandate_date' => null,
        'creditor_id' => null,
        'end_to_end_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'debitor_name' => 'debitorName',
        'debitor_iban' => 'debitorIban',
        'debitor_bic' => 'debitorBic',
        'amount' => 'amount',
        'purpose' => 'purpose',
        'sepa_purpose_code' => 'sepaPurposeCode',
        'mandate_id' => 'mandateId',
        'mandate_date' => 'mandateDate',
        'creditor_id' => 'creditorId',
        'end_to_end_id' => 'endToEndId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'debitor_name' => 'setDebitorName',
        'debitor_iban' => 'setDebitorIban',
        'debitor_bic' => 'setDebitorBic',
        'amount' => 'setAmount',
        'purpose' => 'setPurpose',
        'sepa_purpose_code' => 'setSepaPurposeCode',
        'mandate_id' => 'setMandateId',
        'mandate_date' => 'setMandateDate',
        'creditor_id' => 'setCreditorId',
        'end_to_end_id' => 'setEndToEndId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'debitor_name' => 'getDebitorName',
        'debitor_iban' => 'getDebitorIban',
        'debitor_bic' => 'getDebitorBic',
        'amount' => 'getAmount',
        'purpose' => 'getPurpose',
        'sepa_purpose_code' => 'getSepaPurposeCode',
        'mandate_id' => 'getMandateId',
        'mandate_date' => 'getMandateDate',
        'creditor_id' => 'getCreditorId',
        'end_to_end_id' => 'getEndToEndId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['debitor_name'] = isset($data['debitor_name']) ? $data['debitor_name'] : null;
        $this->container['debitor_iban'] = isset($data['debitor_iban']) ? $data['debitor_iban'] : null;
        $this->container['debitor_bic'] = isset($data['debitor_bic']) ? $data['debitor_bic'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['purpose'] = isset($data['purpose']) ? $data['purpose'] : null;
        $this->container['sepa_purpose_code'] = isset($data['sepa_purpose_code']) ? $data['sepa_purpose_code'] : null;
        $this->container['mandate_id'] = isset($data['mandate_id']) ? $data['mandate_id'] : null;
        $this->container['mandate_date'] = isset($data['mandate_date']) ? $data['mandate_date'] : null;
        $this->container['creditor_id'] = isset($data['creditor_id']) ? $data['creditor_id'] : null;
        $this->container['end_to_end_id'] = isset($data['end_to_end_id']) ? $data['end_to_end_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['debitor_name'] === null) {
            $invalidProperties[] = "'debitor_name' can't be null";
        }
        if ($this->container['debitor_iban'] === null) {
            $invalidProperties[] = "'debitor_iban' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['mandate_id'] === null) {
            $invalidProperties[] = "'mandate_id' can't be null";
        }
        if ($this->container['mandate_date'] === null) {
            $invalidProperties[] = "'mandate_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets debitor_name
     *
     * @return string
     */
    public function getDebitorName()
    {
        return $this->container['debitor_name'];
    }

    /**
     * Sets debitor_name
     *
     * @param string $debitor_name Name of the debitor. Note: Neither finAPI nor the involved bank servers are guaranteed to validate the debitor name. Even if the debitor name does not depict the actual registered account holder of the specified debitor account, the direct debit request might still be successful.
     *
     * @return $this
     */
    public function setDebitorName($debitor_name)
    {
        $this->container['debitor_name'] = $debitor_name;

        return $this;
    }

    /**
     * Gets debitor_iban
     *
     * @return string
     */
    public function getDebitorIban()
    {
        return $this->container['debitor_iban'];
    }

    /**
     * Sets debitor_iban
     *
     * @param string $debitor_iban IBAN of the debitor's account
     *
     * @return $this
     */
    public function setDebitorIban($debitor_iban)
    {
        $this->container['debitor_iban'] = $debitor_iban;

        return $this;
    }

    /**
     * Gets debitor_bic
     *
     * @return string
     */
    public function getDebitorBic()
    {
        return $this->container['debitor_bic'];
    }

    /**
     * Sets debitor_bic
     *
     * @param string $debitor_bic BIC of the debitor's account. Note: This field is optional if - and only if - the bank connection of the account that you want to transfer money to supports the IBAN-Only direct debit. You can find this out via GET /bankConnections/<id>. Also note that when a BIC is given, then this BIC will be used for the direct debit request independent of whether it is required or not.
     *
     * @return $this
     */
    public function setDebitorBic($debitor_bic)
    {
        $this->container['debitor_bic'] = $debitor_bic;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount The amount to transfer. Must be a positive decimal number with at most two decimal places (e.g. 99.99)
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets purpose
     *
     * @return string
     */
    public function getPurpose()
    {
        return $this->container['purpose'];
    }

    /**
     * Sets purpose
     *
     * @param string $purpose The purpose of the transfer transaction
     *
     * @return $this
     */
    public function setPurpose($purpose)
    {
        $this->container['purpose'] = $purpose;

        return $this;
    }

    /**
     * Gets sepa_purpose_code
     *
     * @return string
     */
    public function getSepaPurposeCode()
    {
        return $this->container['sepa_purpose_code'];
    }

    /**
     * Sets sepa_purpose_code
     *
     * @param string $sepa_purpose_code SEPA purpose code, according to ISO 20022, external codes set.
     *
     * @return $this
     */
    public function setSepaPurposeCode($sepa_purpose_code)
    {
        $this->container['sepa_purpose_code'] = $sepa_purpose_code;

        return $this;
    }

    /**
     * Gets mandate_id
     *
     * @return string
     */
    public function getMandateId()
    {
        return $this->container['mandate_id'];
    }

    /**
     * Sets mandate_id
     *
     * @param string $mandate_id Mandate ID that this direct debit order is based on.
     *
     * @return $this
     */
    public function setMandateId($mandate_id)
    {
        $this->container['mandate_id'] = $mandate_id;

        return $this;
    }

    /**
     * Gets mandate_date
     *
     * @return string
     */
    public function getMandateDate()
    {
        return $this->container['mandate_date'];
    }

    /**
     * Sets mandate_date
     *
     * @param string $mandate_date Date of the mandate that this direct debit order is based on, in the format 'YYYY-MM-DD'
     *
     * @return $this
     */
    public function setMandateDate($mandate_date)
    {
        $this->container['mandate_date'] = $mandate_date;

        return $this;
    }

    /**
     * Gets creditor_id
     *
     * @return string
     */
    public function getCreditorId()
    {
        return $this->container['creditor_id'];
    }

    /**
     * Sets creditor_id
     *
     * @param string $creditor_id Creditor ID of the source account's holder
     *
     * @return $this
     */
    public function setCreditorId($creditor_id)
    {
        $this->container['creditor_id'] = $creditor_id;

        return $this;
    }

    /**
     * Gets end_to_end_id
     *
     * @return string
     */
    public function getEndToEndId()
    {
        return $this->container['end_to_end_id'];
    }

    /**
     * Sets end_to_end_id
     *
     * @param string $end_to_end_id End-To-End ID for the transfer transaction
     *
     * @return $this
     */
    public function setEndToEndId($end_to_end_id)
    {
        $this->container['end_to_end_id'] = $end_to_end_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


