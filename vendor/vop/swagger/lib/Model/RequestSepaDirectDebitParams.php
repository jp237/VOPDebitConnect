<?php
/**
 * RequestSepaDirectDebitParams
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * finAPI RESTful Services
 *
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.81.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RequestSepaDirectDebitParams Class Doc Comment
 *
 * @category Class
 * @description Parameters for a single or collective SEPA direct debit order request
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RequestSepaDirectDebitParams implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RequestSepaDirectDebitParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'int',
        'banking_pin' => 'string',
        'store_secrets' => 'bool',
        'two_step_procedure_id' => 'string',
        'direct_debit_type' => 'string',
        'sequence_type' => 'string',
        'execution_date' => 'string',
        'single_booking' => 'bool',
        'direct_debits' => '\Swagger\Client\Model\SingleDirectDebitData[]',
        'hide_transaction_details_in_web_form' => 'bool',
        'multi_step_authentication' => '\Swagger\Client\Model\MultiStepAuthenticationCallback',
        'store_pin' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => 'int64',
        'banking_pin' => null,
        'store_secrets' => null,
        'two_step_procedure_id' => null,
        'direct_debit_type' => null,
        'sequence_type' => null,
        'execution_date' => null,
        'single_booking' => null,
        'direct_debits' => null,
        'hide_transaction_details_in_web_form' => null,
        'multi_step_authentication' => null,
        'store_pin' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'banking_pin' => 'bankingPin',
        'store_secrets' => 'storeSecrets',
        'two_step_procedure_id' => 'twoStepProcedureId',
        'direct_debit_type' => 'directDebitType',
        'sequence_type' => 'sequenceType',
        'execution_date' => 'executionDate',
        'single_booking' => 'singleBooking',
        'direct_debits' => 'directDebits',
        'hide_transaction_details_in_web_form' => 'hideTransactionDetailsInWebForm',
        'multi_step_authentication' => 'multiStepAuthentication',
        'store_pin' => 'storePin'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'banking_pin' => 'setBankingPin',
        'store_secrets' => 'setStoreSecrets',
        'two_step_procedure_id' => 'setTwoStepProcedureId',
        'direct_debit_type' => 'setDirectDebitType',
        'sequence_type' => 'setSequenceType',
        'execution_date' => 'setExecutionDate',
        'single_booking' => 'setSingleBooking',
        'direct_debits' => 'setDirectDebits',
        'hide_transaction_details_in_web_form' => 'setHideTransactionDetailsInWebForm',
        'multi_step_authentication' => 'setMultiStepAuthentication',
        'store_pin' => 'setStorePin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'banking_pin' => 'getBankingPin',
        'store_secrets' => 'getStoreSecrets',
        'two_step_procedure_id' => 'getTwoStepProcedureId',
        'direct_debit_type' => 'getDirectDebitType',
        'sequence_type' => 'getSequenceType',
        'execution_date' => 'getExecutionDate',
        'single_booking' => 'getSingleBooking',
        'direct_debits' => 'getDirectDebits',
        'hide_transaction_details_in_web_form' => 'getHideTransactionDetailsInWebForm',
        'multi_step_authentication' => 'getMultiStepAuthentication',
        'store_pin' => 'getStorePin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DIRECT_DEBIT_TYPE_B2_B = 'B2B';
    const DIRECT_DEBIT_TYPE_BASIC = 'BASIC';
    const SEQUENCE_TYPE_OOFF = 'OOFF';
    const SEQUENCE_TYPE_FRST = 'FRST';
    const SEQUENCE_TYPE_RCUR = 'RCUR';
    const SEQUENCE_TYPE_FNAL = 'FNAL';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectDebitTypeAllowableValues()
    {
        return [
            self::DIRECT_DEBIT_TYPE_B2_B,
            self::DIRECT_DEBIT_TYPE_BASIC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSequenceTypeAllowableValues()
    {
        return [
            self::SEQUENCE_TYPE_OOFF,
            self::SEQUENCE_TYPE_FRST,
            self::SEQUENCE_TYPE_RCUR,
            self::SEQUENCE_TYPE_FNAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['banking_pin'] = isset($data['banking_pin']) ? $data['banking_pin'] : null;
        $this->container['store_secrets'] = isset($data['store_secrets']) ? $data['store_secrets'] : false;
        $this->container['two_step_procedure_id'] = isset($data['two_step_procedure_id']) ? $data['two_step_procedure_id'] : null;
        $this->container['direct_debit_type'] = isset($data['direct_debit_type']) ? $data['direct_debit_type'] : null;
        $this->container['sequence_type'] = isset($data['sequence_type']) ? $data['sequence_type'] : null;
        $this->container['execution_date'] = isset($data['execution_date']) ? $data['execution_date'] : null;
        $this->container['single_booking'] = isset($data['single_booking']) ? $data['single_booking'] : false;
        $this->container['direct_debits'] = isset($data['direct_debits']) ? $data['direct_debits'] : null;
        $this->container['hide_transaction_details_in_web_form'] = isset($data['hide_transaction_details_in_web_form']) ? $data['hide_transaction_details_in_web_form'] : false;
        $this->container['multi_step_authentication'] = isset($data['multi_step_authentication']) ? $data['multi_step_authentication'] : null;
        $this->container['store_pin'] = isset($data['store_pin']) ? $data['store_pin'] : false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['direct_debit_type'] === null) {
            $invalidProperties[] = "'direct_debit_type' can't be null";
        }
        $allowedValues = $this->getDirectDebitTypeAllowableValues();
        if (!is_null($this->container['direct_debit_type']) && !in_array($this->container['direct_debit_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'direct_debit_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['sequence_type'] === null) {
            $invalidProperties[] = "'sequence_type' can't be null";
        }
        $allowedValues = $this->getSequenceTypeAllowableValues();
        if (!is_null($this->container['sequence_type']) && !in_array($this->container['sequence_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sequence_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['execution_date'] === null) {
            $invalidProperties[] = "'execution_date' can't be null";
        }
        if ($this->container['direct_debits'] === null) {
            $invalidProperties[] = "'direct_debits' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id Identifier of the bank account to which you want to transfer the money.
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets banking_pin
     *
     * @return string
     */
    public function getBankingPin()
    {
        return $this->container['banking_pin'];
    }

    /**
     * Sets banking_pin
     *
     * @param string $banking_pin Online banking PIN. Any symbols are allowed. Max length: 170. If a PIN is stored in the bank connection, then this field may remain unset. If finAPI's web form is not required and the field is set though then it will always be used (even if there is some other PIN stored in the bank connection). If you want the user to enter a PIN in finAPI's web form even when a PIN is stored, then just set the field to any value, so that the service recognizes that you wish to use the web form flow.
     *
     * @return $this
     */
    public function setBankingPin($banking_pin)
    {
        $this->container['banking_pin'] = $banking_pin;

        return $this;
    }

    /**
     * Gets store_secrets
     *
     * @return bool
     */
    public function getStoreSecrets()
    {
        return $this->container['store_secrets'];
    }

    /**
     * Sets store_secrets
     *
     * @param bool $store_secrets Whether to store the PIN. If the PIN is stored, it is not required to pass the PIN again when executing SEPA orders. Default value is 'false'. <br/><br/>NOTES:<br/> - before you set this field to true, please regard the 'pinsAreVolatile' flag of the bank connection that the account belongs to;<br/> - this field is ignored in case when the user will need to use finAPI's web form. The user will be able to decide whether to store the PIN or not in the web form, depending on the 'storeSecretsAvailableInWebForm' setting (see Client Configuration).
     *
     * @return $this
     */
    public function setStoreSecrets($store_secrets)
    {
        $this->container['store_secrets'] = $store_secrets;

        return $this;
    }

    /**
     * Gets two_step_procedure_id
     *
     * @return string
     */
    public function getTwoStepProcedureId()
    {
        return $this->container['two_step_procedure_id'];
    }

    /**
     * Sets two_step_procedure_id
     *
     * @param string $two_step_procedure_id The bank-given ID of the two-step-procedure that should be used for the order. For a list of available two-step-procedures, see the corresponding bank connection (GET /bankConnections). If this field is not set, then the bank connection's default two-step-procedure will be used. Note that in this case, when the bank connection has no default two-step-procedure set, then the response of the service depends on whether you need to use finAPI's web form or not. If you need to use the web form, the user will be prompted to select the two-step-procedure within the web form. If you don't need to use the web form, then the service will return an error (passing a value for this field is required in this case).
     *
     * @return $this
     */
    public function setTwoStepProcedureId($two_step_procedure_id)
    {
        $this->container['two_step_procedure_id'] = $two_step_procedure_id;

        return $this;
    }

    /**
     * Gets direct_debit_type
     *
     * @return string
     */
    public function getDirectDebitType()
    {
        return $this->container['direct_debit_type'];
    }

    /**
     * Sets direct_debit_type
     *
     * @param string $direct_debit_type Type of the direct debit; either <code>BASIC</code> or <code>B2B</code> (Business-To-Business). Please note that an account which supports the basic type must not necessarily support B2B (or vice versa). Check the source account's 'supportedOrders' field to find out which types of direct debit it supports.<br/><br/>
     *
     * @return $this
     */
    public function setDirectDebitType($direct_debit_type)
    {
        $allowedValues = $this->getDirectDebitTypeAllowableValues();
        if (!in_array($direct_debit_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'direct_debit_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['direct_debit_type'] = $direct_debit_type;

        return $this;
    }

    /**
     * Gets sequence_type
     *
     * @return string
     */
    public function getSequenceType()
    {
        return $this->container['sequence_type'];
    }

    /**
     * Sets sequence_type
     *
     * @param string $sequence_type Sequence type of the direct debit. Possible values:<br/><br/>&bull; <code>OOFF</code> - means that this is a one-time direct debit order<br/>&bull; <code>FRST</code> - means that this is the first in a row of multiple direct debit orders<br/>&bull; <code>RCUR</code> - means that this is one (but not the first or final) within a row of multiple direct debit orders<br/>&bull; <code>FNAL</code> - means that this is the final in a row of multiple direct debit orders<br/><br/>
     *
     * @return $this
     */
    public function setSequenceType($sequence_type)
    {
        $allowedValues = $this->getSequenceTypeAllowableValues();
        if (!in_array($sequence_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sequence_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sequence_type'] = $sequence_type;

        return $this;
    }

    /**
     * Gets execution_date
     *
     * @return string
     */
    public function getExecutionDate()
    {
        return $this->container['execution_date'];
    }

    /**
     * Sets execution_date
     *
     * @param string $execution_date Execution date for the direct debit(s), in the format 'YYYY-MM-DD'.
     *
     * @return $this
     */
    public function setExecutionDate($execution_date)
    {
        $this->container['execution_date'] = $execution_date;

        return $this;
    }

    /**
     * Gets single_booking
     *
     * @return bool
     */
    public function getSingleBooking()
    {
        return $this->container['single_booking'];
    }

    /**
     * Sets single_booking
     *
     * @param bool $single_booking This field is only regarded when you pass multiple orders. It determines whether the orders should be processed by the bank as one collective booking (in case of 'false'), or as single bookings (in case of 'true'). Default value is 'false'.
     *
     * @return $this
     */
    public function setSingleBooking($single_booking)
    {
        $this->container['single_booking'] = $single_booking;

        return $this;
    }

    /**
     * Gets direct_debits
     *
     * @return \Swagger\Client\Model\SingleDirectDebitData[]
     */
    public function getDirectDebits()
    {
        return $this->container['direct_debits'];
    }

    /**
     * Sets direct_debits
     *
     * @param \Swagger\Client\Model\SingleDirectDebitData[] $direct_debits List of the direct debits that you want to execute (may contain at most 15000 items). Please check the account's 'supportedOrders' field to find out whether you can pass multiple direct debits or just one.
     *
     * @return $this
     */
    public function setDirectDebits($direct_debits)
    {
        $this->container['direct_debits'] = $direct_debits;

        return $this;
    }

    /**
     * Gets hide_transaction_details_in_web_form
     *
     * @return bool
     */
    public function getHideTransactionDetailsInWebForm()
    {
        return $this->container['hide_transaction_details_in_web_form'];
    }

    /**
     * Sets hide_transaction_details_in_web_form
     *
     * @param bool $hide_transaction_details_in_web_form Whether the finAPI web form should hide transaction details when prompting the caller for the second factor. Default value is false.
     *
     * @return $this
     */
    public function setHideTransactionDetailsInWebForm($hide_transaction_details_in_web_form)
    {
        $this->container['hide_transaction_details_in_web_form'] = $hide_transaction_details_in_web_form;

        return $this;
    }

    /**
     * Gets multi_step_authentication
     *
     * @return \Swagger\Client\Model\MultiStepAuthenticationCallback
     */
    public function getMultiStepAuthentication()
    {
        return $this->container['multi_step_authentication'];
    }

    /**
     * Sets multi_step_authentication
     *
     * @param \Swagger\Client\Model\MultiStepAuthenticationCallback $multi_step_authentication Container for multi-step authentication data. Required when a previous service call initiated a multi-step authentication.
     *
     * @return $this
     */
    public function setMultiStepAuthentication($multi_step_authentication)
    {
        $this->container['multi_step_authentication'] = $multi_step_authentication;

        return $this;
    }

    /**
     * Gets store_pin
     *
     * @return bool
     */
    public function getStorePin()
    {
        return $this->container['store_pin'];
    }

    /**
     * Sets store_pin
     *
     * @param bool $store_pin Whether to store the PIN. If the PIN is stored, it is not required to pass the PIN again when executing SEPA orders. Default value is 'false'. <br/><br/>NOTES:<br/> - before you set this field to true, please regard the 'pinsAreVolatile' flag of the bank connection that the account belongs to;<br/> - this field is ignored in case when the user will need to use finAPI's web form. The user will be able to decide whether to store the PIN or not in the web form, depending on the 'storeSecretsAvailableInWebForm' setting (see Client Configuration).<br><br>NOTE: This field is deprecated and will be removed at some point. Use 'storeSecrets' instead.
     *
     * @return $this
     */
    public function setStorePin($store_pin)
    {
        $this->container['store_pin'] = $store_pin;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


