<?php
/**
 * TwoStepProcedure
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * finAPI RESTful Services
 *
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.81.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TwoStepProcedure Class Doc Comment
 *
 * @category Class
 * @description Two-step-procedure for user authorization on bank-side
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TwoStepProcedure implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TwoStepProcedure';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'procedure_id' => 'string',
        'procedure_name' => 'string',
        'procedure_challenge_type' => 'string',
        'implicit_execute' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'procedure_id' => null,
        'procedure_name' => null,
        'procedure_challenge_type' => null,
        'implicit_execute' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'procedure_id' => 'procedureId',
        'procedure_name' => 'procedureName',
        'procedure_challenge_type' => 'procedureChallengeType',
        'implicit_execute' => 'implicitExecute'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'procedure_id' => 'setProcedureId',
        'procedure_name' => 'setProcedureName',
        'procedure_challenge_type' => 'setProcedureChallengeType',
        'implicit_execute' => 'setImplicitExecute'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'procedure_id' => 'getProcedureId',
        'procedure_name' => 'getProcedureName',
        'procedure_challenge_type' => 'getProcedureChallengeType',
        'implicit_execute' => 'getImplicitExecute'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['procedure_id'] = isset($data['procedure_id']) ? $data['procedure_id'] : null;
        $this->container['procedure_name'] = isset($data['procedure_name']) ? $data['procedure_name'] : null;
        $this->container['procedure_challenge_type'] = isset($data['procedure_challenge_type']) ? $data['procedure_challenge_type'] : null;
        $this->container['implicit_execute'] = isset($data['implicit_execute']) ? $data['implicit_execute'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['procedure_id'] === null) {
            $invalidProperties[] = "'procedure_id' can't be null";
        }
        if ($this->container['procedure_name'] === null) {
            $invalidProperties[] = "'procedure_name' can't be null";
        }
        if ($this->container['implicit_execute'] === null) {
            $invalidProperties[] = "'implicit_execute' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets procedure_id
     *
     * @return string
     */
    public function getProcedureId()
    {
        return $this->container['procedure_id'];
    }

    /**
     * Sets procedure_id
     *
     * @param string $procedure_id Bank-given ID of the procedure
     *
     * @return $this
     */
    public function setProcedureId($procedure_id)
    {
        $this->container['procedure_id'] = $procedure_id;

        return $this;
    }

    /**
     * Gets procedure_name
     *
     * @return string
     */
    public function getProcedureName()
    {
        return $this->container['procedure_name'];
    }

    /**
     * Sets procedure_name
     *
     * @param string $procedure_name Bank-given name of the procedure
     *
     * @return $this
     */
    public function setProcedureName($procedure_name)
    {
        $this->container['procedure_name'] = $procedure_name;

        return $this;
    }

    /**
     * Gets procedure_challenge_type
     *
     * @return string
     */
    public function getProcedureChallengeType()
    {
        return $this->container['procedure_challenge_type'];
    }

    /**
     * Sets procedure_challenge_type
     *
     * @param string $procedure_challenge_type The challenge type of the procedure. Possible values are:<br/><br/>&bull; <code>TEXT</code> - the challenge will be a text that contains instructions for the user on how to proceed with the authorization.<br/>&bull; <code>PHOTO</code> - the challenge will contain a BASE-64 string depicting a photo (or any kind of QR-code-like data) that must be shown to the user.<br/>&bull; <code>FLICKER_CODE</code> - the challenge will contain a BASE-64 string depicting a flicker code animation that must be shown to the user.<br/><br/>Note that this challenge type information does not originate from the bank, but is determined by finAPI internally. There is no guarantee that the determined challenge type is correct. Note also that this field may not be set, meaning that finAPI could not determine the challenge type of the procedure.
     *
     * @return $this
     */
    public function setProcedureChallengeType($procedure_challenge_type)
    {
        $this->container['procedure_challenge_type'] = $procedure_challenge_type;

        return $this;
    }

    /**
     * Gets implicit_execute
     *
     * @return bool
     */
    public function getImplicitExecute()
    {
        return $this->container['implicit_execute'];
    }

    /**
     * Sets implicit_execute
     *
     * @param bool $implicit_execute If 'true', then there is no need for your client to pass back anything to finAPI to continue the authorization when using this procedure. The authorization will be dealt with directly between the user, finAPI, and the bank.
     *
     * @return $this
     */
    public function setImplicitExecute($implicit_execute)
    {
        $this->container['implicit_execute'] = $implicit_execute;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


