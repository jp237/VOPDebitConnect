<?php
/**
 * MoneyTransferOrderingResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * finAPI RESTful Services
 *
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.81.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MoneyTransferOrderingResponse Class Doc Comment
 *
 * @category Class
 * @description Bank server&#39;s response to a money transfer order request
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MoneyTransferOrderingResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MoneyTransferOrderingResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'success_message' => 'string',
        'warn_message' => 'string',
        'payment_id' => 'int',
        'challenge_message' => 'string',
        'answer_field_label' => 'string',
        'tan_list_number' => 'string',
        'optical_data' => 'string',
        'photo_tan_mime_type' => 'string',
        'photo_tan_data' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'success_message' => null,
        'warn_message' => null,
        'payment_id' => 'int64',
        'challenge_message' => null,
        'answer_field_label' => null,
        'tan_list_number' => null,
        'optical_data' => null,
        'photo_tan_mime_type' => null,
        'photo_tan_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'success_message' => 'successMessage',
        'warn_message' => 'warnMessage',
        'payment_id' => 'paymentId',
        'challenge_message' => 'challengeMessage',
        'answer_field_label' => 'answerFieldLabel',
        'tan_list_number' => 'tanListNumber',
        'optical_data' => 'opticalData',
        'photo_tan_mime_type' => 'photoTanMimeType',
        'photo_tan_data' => 'photoTanData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'success_message' => 'setSuccessMessage',
        'warn_message' => 'setWarnMessage',
        'payment_id' => 'setPaymentId',
        'challenge_message' => 'setChallengeMessage',
        'answer_field_label' => 'setAnswerFieldLabel',
        'tan_list_number' => 'setTanListNumber',
        'optical_data' => 'setOpticalData',
        'photo_tan_mime_type' => 'setPhotoTanMimeType',
        'photo_tan_data' => 'setPhotoTanData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'success_message' => 'getSuccessMessage',
        'warn_message' => 'getWarnMessage',
        'payment_id' => 'getPaymentId',
        'challenge_message' => 'getChallengeMessage',
        'answer_field_label' => 'getAnswerFieldLabel',
        'tan_list_number' => 'getTanListNumber',
        'optical_data' => 'getOpticalData',
        'photo_tan_mime_type' => 'getPhotoTanMimeType',
        'photo_tan_data' => 'getPhotoTanData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['success_message'] = isset($data['success_message']) ? $data['success_message'] : null;
        $this->container['warn_message'] = isset($data['warn_message']) ? $data['warn_message'] : null;
        $this->container['payment_id'] = isset($data['payment_id']) ? $data['payment_id'] : null;
        $this->container['challenge_message'] = isset($data['challenge_message']) ? $data['challenge_message'] : null;
        $this->container['answer_field_label'] = isset($data['answer_field_label']) ? $data['answer_field_label'] : null;
        $this->container['tan_list_number'] = isset($data['tan_list_number']) ? $data['tan_list_number'] : null;
        $this->container['optical_data'] = isset($data['optical_data']) ? $data['optical_data'] : null;
        $this->container['photo_tan_mime_type'] = isset($data['photo_tan_mime_type']) ? $data['photo_tan_mime_type'] : null;
        $this->container['photo_tan_data'] = isset($data['photo_tan_data']) ? $data['photo_tan_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['payment_id'] === null) {
            $invalidProperties[] = "'payment_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets success_message
     *
     * @return string
     */
    public function getSuccessMessage()
    {
        return $this->container['success_message'];
    }

    /**
     * Sets success_message
     *
     * @param string $success_message Technical message from the bank server, confirming the success of the request. Typically, you would not want to present this message to the user. Note that this field may not be set. However if it is not set, it does not necessarily mean that there was an error in processing the request.
     *
     * @return $this
     */
    public function setSuccessMessage($success_message)
    {
        $this->container['success_message'] = $success_message;

        return $this;
    }

    /**
     * Gets warn_message
     *
     * @return string
     */
    public function getWarnMessage()
    {
        return $this->container['warn_message'];
    }

    /**
     * Sets warn_message
     *
     * @param string $warn_message In some cases, a bank server may accept the requested order, but return a warn message. This message may be of technical nature, but could also be of interest to the user.
     *
     * @return $this
     */
    public function setWarnMessage($warn_message)
    {
        $this->container['warn_message'] = $warn_message;

        return $this;
    }

    /**
     * Gets payment_id
     *
     * @return int
     */
    public function getPaymentId()
    {
        return $this->container['payment_id'];
    }

    /**
     * Sets payment_id
     *
     * @param int $payment_id Payment identifier. Can be used to retrieve the status of the payment (see 'Get payments' service).
     *
     * @return $this
     */
    public function setPaymentId($payment_id)
    {
        $this->container['payment_id'] = $payment_id;

        return $this;
    }

    /**
     * Gets challenge_message
     *
     * @return string
     */
    public function getChallengeMessage()
    {
        return $this->container['challenge_message'];
    }

    /**
     * Sets challenge_message
     *
     * @param string $challenge_message Message from the bank server containing information or instructions on how to retrieve the TAN that is needed to execute the requested order. This message should be presented to the user. Note that some bank servers may limit the message to just the most crucial information, e.g. the message may contain just a single number that depicts the target TAN number on a user's TAN list. You may want to parse the challenge message for such cases and extend it with more detailed information before showing it to the user.
     *
     * @return $this
     */
    public function setChallengeMessage($challenge_message)
    {
        $this->container['challenge_message'] = $challenge_message;

        return $this;
    }

    /**
     * Gets answer_field_label
     *
     * @return string
     */
    public function getAnswerFieldLabel()
    {
        return $this->container['answer_field_label'];
    }

    /**
     * Sets answer_field_label
     *
     * @param string $answer_field_label Suggestion from the bank server on how you can label your input field where the user must enter his TAN. A typical value that many bank servers give is 'TAN-Nummer'.
     *
     * @return $this
     */
    public function setAnswerFieldLabel($answer_field_label)
    {
        $this->container['answer_field_label'] = $answer_field_label;

        return $this;
    }

    /**
     * Gets tan_list_number
     *
     * @return string
     */
    public function getTanListNumber()
    {
        return $this->container['tan_list_number'];
    }

    /**
     * Sets tan_list_number
     *
     * @param string $tan_list_number In case that the bank server has instructed the user to look up a TAN from a TAN list, this field may contain the identification number of the TAN list. However in most cases, this field is only set (i.e. not null) when the user has multiple active TAN lists.
     *
     * @return $this
     */
    public function setTanListNumber($tan_list_number)
    {
        $this->container['tan_list_number'] = $tan_list_number;

        return $this;
    }

    /**
     * Gets optical_data
     *
     * @return string
     */
    public function getOpticalData()
    {
        return $this->container['optical_data'];
    }

    /**
     * Sets optical_data
     *
     * @param string $optical_data In case that the bank server has instructed the user to scan a flicker code, then this field will contain the raw data for the flicker animation as a BASE-64 string. Otherwise, this field will be not set (i.e. null). For more information on how to process the flicker code data, please address the <a href='https://finapi.zendesk.com' target='_blank'>finAPI Developer Portal</a>.
     *
     * @return $this
     */
    public function setOpticalData($optical_data)
    {
        $this->container['optical_data'] = $optical_data;

        return $this;
    }

    /**
     * Gets photo_tan_mime_type
     *
     * @return string
     */
    public function getPhotoTanMimeType()
    {
        return $this->container['photo_tan_mime_type'];
    }

    /**
     * Sets photo_tan_mime_type
     *
     * @param string $photo_tan_mime_type In case that the 'photoTanData' field is set (i.e. not null), this field contains the MIME type to use for interpreting the photo data (e.g.: 'image/png')
     *
     * @return $this
     */
    public function setPhotoTanMimeType($photo_tan_mime_type)
    {
        $this->container['photo_tan_mime_type'] = $photo_tan_mime_type;

        return $this;
    }

    /**
     * Gets photo_tan_data
     *
     * @return string
     */
    public function getPhotoTanData()
    {
        return $this->container['photo_tan_data'];
    }

    /**
     * Sets photo_tan_data
     *
     * @param string $photo_tan_data In case that the bank server has instructed the user to scan a photo (or more generally speaking, any kind of QR-code-like data), then this field will contain the raw data of the photo as a BASE-64 string. Otherwise, this field will be not set (i.e. null). For more information on how to process the photo data, please address the <a href='https://finapi.zendesk.com' target='_blank'>finAPI Developer Portal</a>.
     *
     * @return $this
     */
    public function setPhotoTanData($photo_tan_data)
    {
        $this->container['photo_tan_data'] = $photo_tan_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


