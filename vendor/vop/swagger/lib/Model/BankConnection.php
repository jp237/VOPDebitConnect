<?php
/**
 * BankConnection
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * finAPI RESTful Services
 *
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.81.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BankConnection Class Doc Comment
 *
 * @category Class
 * @description Container for a bank connection&#39;s data
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BankConnection implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BankConnection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'bank_id' => 'int',
        'name' => 'string',
        'banking_user_id' => 'string',
        'banking_customer_id' => 'string',
        'banking_pin' => 'string',
        'type' => 'string',
        'update_status' => 'string',
        'categorization_status' => 'string',
        'last_manual_update' => '\Swagger\Client\Model\UpdateResult',
        'last_auto_update' => '\Swagger\Client\Model\UpdateResult',
        'iban_only_money_transfer_supported' => 'bool',
        'iban_only_direct_debit_supported' => 'bool',
        'collective_money_transfer_supported' => 'bool',
        'default_two_step_procedure_id' => 'string',
        'two_step_procedures' => '\Swagger\Client\Model\TwoStepProcedure[]',
        'interfaces' => '\Swagger\Client\Model\BankConnectionInterface[]',
        'account_ids' => 'int[]',
        'owners' => '\Swagger\Client\Model\BankConnectionOwner[]',
        'bank' => '\Swagger\Client\Model\Bank',
        'further_login_not_recommended' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'bank_id' => 'int64',
        'name' => null,
        'banking_user_id' => null,
        'banking_customer_id' => null,
        'banking_pin' => null,
        'type' => null,
        'update_status' => null,
        'categorization_status' => null,
        'last_manual_update' => null,
        'last_auto_update' => null,
        'iban_only_money_transfer_supported' => null,
        'iban_only_direct_debit_supported' => null,
        'collective_money_transfer_supported' => null,
        'default_two_step_procedure_id' => null,
        'two_step_procedures' => null,
        'interfaces' => null,
        'account_ids' => 'int64',
        'owners' => null,
        'bank' => null,
        'further_login_not_recommended' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'bank_id' => 'bankId',
        'name' => 'name',
        'banking_user_id' => 'bankingUserId',
        'banking_customer_id' => 'bankingCustomerId',
        'banking_pin' => 'bankingPin',
        'type' => 'type',
        'update_status' => 'updateStatus',
        'categorization_status' => 'categorizationStatus',
        'last_manual_update' => 'lastManualUpdate',
        'last_auto_update' => 'lastAutoUpdate',
        'iban_only_money_transfer_supported' => 'ibanOnlyMoneyTransferSupported',
        'iban_only_direct_debit_supported' => 'ibanOnlyDirectDebitSupported',
        'collective_money_transfer_supported' => 'collectiveMoneyTransferSupported',
        'default_two_step_procedure_id' => 'defaultTwoStepProcedureId',
        'two_step_procedures' => 'twoStepProcedures',
        'interfaces' => 'interfaces',
        'account_ids' => 'accountIds',
        'owners' => 'owners',
        'bank' => 'bank',
        'further_login_not_recommended' => 'furtherLoginNotRecommended'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'bank_id' => 'setBankId',
        'name' => 'setName',
        'banking_user_id' => 'setBankingUserId',
        'banking_customer_id' => 'setBankingCustomerId',
        'banking_pin' => 'setBankingPin',
        'type' => 'setType',
        'update_status' => 'setUpdateStatus',
        'categorization_status' => 'setCategorizationStatus',
        'last_manual_update' => 'setLastManualUpdate',
        'last_auto_update' => 'setLastAutoUpdate',
        'iban_only_money_transfer_supported' => 'setIbanOnlyMoneyTransferSupported',
        'iban_only_direct_debit_supported' => 'setIbanOnlyDirectDebitSupported',
        'collective_money_transfer_supported' => 'setCollectiveMoneyTransferSupported',
        'default_two_step_procedure_id' => 'setDefaultTwoStepProcedureId',
        'two_step_procedures' => 'setTwoStepProcedures',
        'interfaces' => 'setInterfaces',
        'account_ids' => 'setAccountIds',
        'owners' => 'setOwners',
        'bank' => 'setBank',
        'further_login_not_recommended' => 'setFurtherLoginNotRecommended'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'bank_id' => 'getBankId',
        'name' => 'getName',
        'banking_user_id' => 'getBankingUserId',
        'banking_customer_id' => 'getBankingCustomerId',
        'banking_pin' => 'getBankingPin',
        'type' => 'getType',
        'update_status' => 'getUpdateStatus',
        'categorization_status' => 'getCategorizationStatus',
        'last_manual_update' => 'getLastManualUpdate',
        'last_auto_update' => 'getLastAutoUpdate',
        'iban_only_money_transfer_supported' => 'getIbanOnlyMoneyTransferSupported',
        'iban_only_direct_debit_supported' => 'getIbanOnlyDirectDebitSupported',
        'collective_money_transfer_supported' => 'getCollectiveMoneyTransferSupported',
        'default_two_step_procedure_id' => 'getDefaultTwoStepProcedureId',
        'two_step_procedures' => 'getTwoStepProcedures',
        'interfaces' => 'getInterfaces',
        'account_ids' => 'getAccountIds',
        'owners' => 'getOwners',
        'bank' => 'getBank',
        'further_login_not_recommended' => 'getFurtherLoginNotRecommended'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_ONLINE = 'ONLINE';
    const TYPE_DEMO = 'DEMO';
    const UPDATE_STATUS_IN_PROGRESS = 'IN_PROGRESS';
    const UPDATE_STATUS_READY = 'READY';
    const CATEGORIZATION_STATUS_IN_PROGRESS = 'IN_PROGRESS';
    const CATEGORIZATION_STATUS_PENDING = 'PENDING';
    const CATEGORIZATION_STATUS_READY = 'READY';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ONLINE,
            self::TYPE_DEMO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUpdateStatusAllowableValues()
    {
        return [
            self::UPDATE_STATUS_IN_PROGRESS,
            self::UPDATE_STATUS_READY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategorizationStatusAllowableValues()
    {
        return [
            self::CATEGORIZATION_STATUS_IN_PROGRESS,
            self::CATEGORIZATION_STATUS_PENDING,
            self::CATEGORIZATION_STATUS_READY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['bank_id'] = isset($data['bank_id']) ? $data['bank_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['banking_user_id'] = isset($data['banking_user_id']) ? $data['banking_user_id'] : null;
        $this->container['banking_customer_id'] = isset($data['banking_customer_id']) ? $data['banking_customer_id'] : null;
        $this->container['banking_pin'] = isset($data['banking_pin']) ? $data['banking_pin'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['update_status'] = isset($data['update_status']) ? $data['update_status'] : null;
        $this->container['categorization_status'] = isset($data['categorization_status']) ? $data['categorization_status'] : null;
        $this->container['last_manual_update'] = isset($data['last_manual_update']) ? $data['last_manual_update'] : null;
        $this->container['last_auto_update'] = isset($data['last_auto_update']) ? $data['last_auto_update'] : null;
        $this->container['iban_only_money_transfer_supported'] = isset($data['iban_only_money_transfer_supported']) ? $data['iban_only_money_transfer_supported'] : null;
        $this->container['iban_only_direct_debit_supported'] = isset($data['iban_only_direct_debit_supported']) ? $data['iban_only_direct_debit_supported'] : null;
        $this->container['collective_money_transfer_supported'] = isset($data['collective_money_transfer_supported']) ? $data['collective_money_transfer_supported'] : null;
        $this->container['default_two_step_procedure_id'] = isset($data['default_two_step_procedure_id']) ? $data['default_two_step_procedure_id'] : null;
        $this->container['two_step_procedures'] = isset($data['two_step_procedures']) ? $data['two_step_procedures'] : null;
        $this->container['interfaces'] = isset($data['interfaces']) ? $data['interfaces'] : null;
        $this->container['account_ids'] = isset($data['account_ids']) ? $data['account_ids'] : null;
        $this->container['owners'] = isset($data['owners']) ? $data['owners'] : null;
        $this->container['bank'] = isset($data['bank']) ? $data['bank'] : null;
        $this->container['further_login_not_recommended'] = isset($data['further_login_not_recommended']) ? $data['further_login_not_recommended'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['bank_id'] === null) {
            $invalidProperties[] = "'bank_id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['update_status'] === null) {
            $invalidProperties[] = "'update_status' can't be null";
        }
        $allowedValues = $this->getUpdateStatusAllowableValues();
        if (!is_null($this->container['update_status']) && !in_array($this->container['update_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'update_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['categorization_status'] === null) {
            $invalidProperties[] = "'categorization_status' can't be null";
        }
        $allowedValues = $this->getCategorizationStatusAllowableValues();
        if (!is_null($this->container['categorization_status']) && !in_array($this->container['categorization_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'categorization_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['iban_only_money_transfer_supported'] === null) {
            $invalidProperties[] = "'iban_only_money_transfer_supported' can't be null";
        }
        if ($this->container['iban_only_direct_debit_supported'] === null) {
            $invalidProperties[] = "'iban_only_direct_debit_supported' can't be null";
        }
        if ($this->container['collective_money_transfer_supported'] === null) {
            $invalidProperties[] = "'collective_money_transfer_supported' can't be null";
        }
        if ($this->container['account_ids'] === null) {
            $invalidProperties[] = "'account_ids' can't be null";
        }
        if ($this->container['bank'] === null) {
            $invalidProperties[] = "'bank' can't be null";
        }
        if ($this->container['further_login_not_recommended'] === null) {
            $invalidProperties[] = "'further_login_not_recommended' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Bank connection identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets bank_id
     *
     * @return int
     */
    public function getBankId()
    {
        return $this->container['bank_id'];
    }

    /**
     * Sets bank_id
     *
     * @param int $bank_id Identifier of the bank that this connection belongs to. NOTE: This field is DEPRECATED and will get removed at some point. Please refer to the 'bank' field instead.
     *
     * @return $this
     */
    public function setBankId($bank_id)
    {
        $this->container['bank_id'] = $bank_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Custom name for the bank connection. You can set this field with the 'Edit a bank connection' service, as well as during the initial import of the bank connection. Maximum length is 64.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets banking_user_id
     *
     * @return string
     */
    public function getBankingUserId()
    {
        return $this->container['banking_user_id'];
    }

    /**
     * Sets banking_user_id
     *
     * @param string $banking_user_id NOTE: This field is deprecated and will be removed at some point. Please refer to the 'loginCredentials' in the 'interfaces' field instead.<br><br>Stored online banking user ID credential. This field may be null for the 'demo connection'. If your client has no license for processing banking credentials then a banking user ID will always be 'XXXXX'
     *
     * @return $this
     */
    public function setBankingUserId($banking_user_id)
    {
        $this->container['banking_user_id'] = $banking_user_id;

        return $this;
    }

    /**
     * Gets banking_customer_id
     *
     * @return string
     */
    public function getBankingCustomerId()
    {
        return $this->container['banking_customer_id'];
    }

    /**
     * Sets banking_customer_id
     *
     * @param string $banking_customer_id NOTE: This field is deprecated and will be removed at some point. Please refer to the 'loginCredentials' in the 'interfaces' field instead.<br><br>Stored online banking customer ID credential. If your client has no license for processing banking credentials or if this field contains a value that requires password protection (see field ‘isCustomerIdPassword’ in Bank Resource) then the banking customer ID will always be 'XXXXX
     *
     * @return $this
     */
    public function setBankingCustomerId($banking_customer_id)
    {
        $this->container['banking_customer_id'] = $banking_customer_id;

        return $this;
    }

    /**
     * Gets banking_pin
     *
     * @return string
     */
    public function getBankingPin()
    {
        return $this->container['banking_pin'];
    }

    /**
     * Sets banking_pin
     *
     * @param string $banking_pin NOTE: This field is deprecated and will be removed at some point. Please refer to the 'loginCredentials' in the 'interfaces' field instead.<br><br>Stored online banking PIN. If a PIN is stored, this will always be 'XXXXX'
     *
     * @return $this
     */
    public function setBankingPin($banking_pin)
    {
        $this->container['banking_pin'] = $banking_pin;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Bank connection type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets update_status
     *
     * @return string
     */
    public function getUpdateStatus()
    {
        return $this->container['update_status'];
    }

    /**
     * Sets update_status
     *
     * @param string $update_status Current status of data download (account balances and transactions/securities). The POST /bankConnections/import and POST /bankConnections/<id>/update services will set this flag to IN_PROGRESS before they return. Once the import or update has finished, the status will be changed to READY.
     *
     * @return $this
     */
    public function setUpdateStatus($update_status)
    {
        $allowedValues = $this->getUpdateStatusAllowableValues();
        if (!in_array($update_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'update_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['update_status'] = $update_status;

        return $this;
    }

    /**
     * Gets categorization_status
     *
     * @return string
     */
    public function getCategorizationStatus()
    {
        return $this->container['categorization_status'];
    }

    /**
     * Sets categorization_status
     *
     * @param string $categorization_status Current status of transactions categorization. The asynchronous download process that is triggered by a call of the POST /bankConnections/import and POST /bankConnections/<id>/update services (and also by finAPI's auto update, if enabled) will set this flag to PENDING once the download has finished and a categorization is scheduled for the imported transactions. A separate categorization thread will then start to categorize the transactions (during this process, the status is IN_PROGRESS). When categorization has finished, the status will be (re-)set to READY. Note that the current categorization status should only be queried after the download has finished, i.e. once the download status has switched from IN_PROGRESS to READY.
     *
     * @return $this
     */
    public function setCategorizationStatus($categorization_status)
    {
        $allowedValues = $this->getCategorizationStatusAllowableValues();
        if (!in_array($categorization_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'categorization_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['categorization_status'] = $categorization_status;

        return $this;
    }

    /**
     * Gets last_manual_update
     *
     * @return \Swagger\Client\Model\UpdateResult
     */
    public function getLastManualUpdate()
    {
        return $this->container['last_manual_update'];
    }

    /**
     * Sets last_manual_update
     *
     * @param \Swagger\Client\Model\UpdateResult $last_manual_update NOTE: This field is deprecated and will be removed at some point. Please refer to corresponding field in 'interfaces' instead.<br><br>Result of the last manual update of this bank connection. If no manual update has ever been done so far, then this field will not be set.
     *
     * @return $this
     */
    public function setLastManualUpdate($last_manual_update)
    {
        $this->container['last_manual_update'] = $last_manual_update;

        return $this;
    }

    /**
     * Gets last_auto_update
     *
     * @return \Swagger\Client\Model\UpdateResult
     */
    public function getLastAutoUpdate()
    {
        return $this->container['last_auto_update'];
    }

    /**
     * Sets last_auto_update
     *
     * @param \Swagger\Client\Model\UpdateResult $last_auto_update NOTE: This field is deprecated and will be removed at some point. Please refer to corresponding field in 'interfaces' instead.<br><br>Result of the last auto update of this bank connection (ran by finAPI's automatic batch update process). If no auto update has ever been done so far, then this field will not be set.
     *
     * @return $this
     */
    public function setLastAutoUpdate($last_auto_update)
    {
        $this->container['last_auto_update'] = $last_auto_update;

        return $this;
    }

    /**
     * Gets iban_only_money_transfer_supported
     *
     * @return bool
     */
    public function getIbanOnlyMoneyTransferSupported()
    {
        return $this->container['iban_only_money_transfer_supported'];
    }

    /**
     * Sets iban_only_money_transfer_supported
     *
     * @param bool $iban_only_money_transfer_supported NOTE: This field is deprecated and will be removed at some point. Please refer to the account capabilities instead.<br><br>Whether this bank connection accepts money transfer requests where the recipient's account is defined just by the IBAN (without an additional BIC). This field is re-evaluated each time this bank connection is updated. <br/>See also: /accounts/requestSepaMoneyTransfer
     *
     * @return $this
     */
    public function setIbanOnlyMoneyTransferSupported($iban_only_money_transfer_supported)
    {
        $this->container['iban_only_money_transfer_supported'] = $iban_only_money_transfer_supported;

        return $this;
    }

    /**
     * Gets iban_only_direct_debit_supported
     *
     * @return bool
     */
    public function getIbanOnlyDirectDebitSupported()
    {
        return $this->container['iban_only_direct_debit_supported'];
    }

    /**
     * Sets iban_only_direct_debit_supported
     *
     * @param bool $iban_only_direct_debit_supported NOTE: This field is deprecated and will be removed at some point. Please refer to the account capabilities instead.<br><br>Whether this bank connection accepts direct debit requests where the debitor's account is defined just by the IBAN (without an additional BIC). This field is re-evaluated each time this bank connection is updated. <br/>See also: /accounts/requestSepaDirectDebit
     *
     * @return $this
     */
    public function setIbanOnlyDirectDebitSupported($iban_only_direct_debit_supported)
    {
        $this->container['iban_only_direct_debit_supported'] = $iban_only_direct_debit_supported;

        return $this;
    }

    /**
     * Gets collective_money_transfer_supported
     *
     * @return bool
     */
    public function getCollectiveMoneyTransferSupported()
    {
        return $this->container['collective_money_transfer_supported'];
    }

    /**
     * Sets collective_money_transfer_supported
     *
     * @param bool $collective_money_transfer_supported NOTE: This field is deprecated and will be removed at some point. Please refer to the account capabilities instead.<br><br>Whether this bank connection supports submitting collective money transfers. This field is re-evaluated each time this bank connection is updated. <br/>See also: /accounts/requestSepaMoneyTransfer
     *
     * @return $this
     */
    public function setCollectiveMoneyTransferSupported($collective_money_transfer_supported)
    {
        $this->container['collective_money_transfer_supported'] = $collective_money_transfer_supported;

        return $this;
    }

    /**
     * Gets default_two_step_procedure_id
     *
     * @return string
     */
    public function getDefaultTwoStepProcedureId()
    {
        return $this->container['default_two_step_procedure_id'];
    }

    /**
     * Sets default_two_step_procedure_id
     *
     * @param string $default_two_step_procedure_id NOTE: This field is deprecated and will be removed at some point. Please refer to corresponding field in 'interfaces' instead.<br><br>The default two-step-procedure. Must match one of the available 'procedureId's from the 'twoStepProcedures' list. When this field is set, you can execute two-step-procedures (accounts/requestSepaMoneyTransfer or /requestSepaDirectDebit) without having to explicitly set a procedure. finAPI will use the default procedure in such cases. Note that the list of available procedures of a bank connection may change as a result of an update of the connection, and if this field references a procedure that is no longer available after an update, finAPI will automatically clear the default procedure (set it to null).s
     *
     * @return $this
     */
    public function setDefaultTwoStepProcedureId($default_two_step_procedure_id)
    {
        $this->container['default_two_step_procedure_id'] = $default_two_step_procedure_id;

        return $this;
    }

    /**
     * Gets two_step_procedures
     *
     * @return \Swagger\Client\Model\TwoStepProcedure[]
     */
    public function getTwoStepProcedures()
    {
        return $this->container['two_step_procedures'];
    }

    /**
     * Sets two_step_procedures
     *
     * @param \Swagger\Client\Model\TwoStepProcedure[] $two_step_procedures NOTE: This field is deprecated and will be removed at some point. Please refer to corresponding field in 'interfaces' instead.<br><br>Available two-step-procedures for this bank connection, used for submitting a money transfer or direct debit request (see /accounts/requestSepaMoneyTransfer or /requestSepaDirectDebit). The available two-step-procedures are re-evaluated each time this bank connection is updated (/bankConnections/update). This means that this list may change as a result of an update.
     *
     * @return $this
     */
    public function setTwoStepProcedures($two_step_procedures)
    {
        $this->container['two_step_procedures'] = $two_step_procedures;

        return $this;
    }

    /**
     * Gets interfaces
     *
     * @return \Swagger\Client\Model\BankConnectionInterface[]
     */
    public function getInterfaces()
    {
        return $this->container['interfaces'];
    }

    /**
     * Sets interfaces
     *
     * @param \Swagger\Client\Model\BankConnectionInterface[] $interfaces Set of interfaces that are connected for this bank connection.
     *
     * @return $this
     */
    public function setInterfaces($interfaces)
    {
        $this->container['interfaces'] = $interfaces;

        return $this;
    }

    /**
     * Gets account_ids
     *
     * @return int[]
     */
    public function getAccountIds()
    {
        return $this->container['account_ids'];
    }

    /**
     * Sets account_ids
     *
     * @param int[] $account_ids Identifiers of the accounts that belong to this bank connection
     *
     * @return $this
     */
    public function setAccountIds($account_ids)
    {
        $this->container['account_ids'] = $account_ids;

        return $this;
    }

    /**
     * Gets owners
     *
     * @return \Swagger\Client\Model\BankConnectionOwner[]
     */
    public function getOwners()
    {
        return $this->container['owners'];
    }

    /**
     * Sets owners
     *
     * @param \Swagger\Client\Model\BankConnectionOwner[] $owners Information about the owner(s) of the bank connection
     *
     * @return $this
     */
    public function setOwners($owners)
    {
        $this->container['owners'] = $owners;

        return $this;
    }

    /**
     * Gets bank
     *
     * @return \Swagger\Client\Model\Bank
     */
    public function getBank()
    {
        return $this->container['bank'];
    }

    /**
     * Sets bank
     *
     * @param \Swagger\Client\Model\Bank $bank Bank that this connection belongs to
     *
     * @return $this
     */
    public function setBank($bank)
    {
        $this->container['bank'] = $bank;

        return $this;
    }

    /**
     * Gets further_login_not_recommended
     *
     * @return bool
     */
    public function getFurtherLoginNotRecommended()
    {
        return $this->container['further_login_not_recommended'];
    }

    /**
     * Sets further_login_not_recommended
     *
     * @param bool $further_login_not_recommended This field indicates whether the last communication with the bank failed with an error that requires the user's attention. If 'furtherLoginNotRecommended' is true, finAPI will stop auto updates of this bank connection to mitigate the risk of the user's bank account getting locked by the bank. Every communication with the bank (via updates, money_transfers, direct debits. etc.) can change the value of this flag. If this field is true, we recommend the user to check his credentials and try a manual update of the bank connection. If the update is successful, the 'furtherLoginNotRecommended' field will be set to false and the bank connection will be reincluded in the next batch update process. A manual update of the bank connection with incorrect credentials will set this field to true and lead to the exclusion of the bank connection from the following batch updates.
     *
     * @return $this
     */
    public function setFurtherLoginNotRecommended($further_login_not_recommended)
    {
        $this->container['further_login_not_recommended'] = $further_login_not_recommended;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


