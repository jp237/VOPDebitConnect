<?php
/**
 * CashFlow
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * finAPI RESTful Services
 *
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.81.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CashFlow Class Doc Comment
 *
 * @category Class
 * @description Cash flow
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CashFlow implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CashFlow';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'category' => '\Swagger\Client\Model\Category',
        'income' => 'float',
        'spending' => 'float',
        'balance' => 'float',
        'count_income_transactions' => 'int',
        'count_spending_transactions' => 'int',
        'count_all_transactions' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'category' => null,
        'income' => null,
        'spending' => null,
        'balance' => null,
        'count_income_transactions' => 'int32',
        'count_spending_transactions' => 'int32',
        'count_all_transactions' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category' => 'category',
        'income' => 'income',
        'spending' => 'spending',
        'balance' => 'balance',
        'count_income_transactions' => 'countIncomeTransactions',
        'count_spending_transactions' => 'countSpendingTransactions',
        'count_all_transactions' => 'countAllTransactions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category' => 'setCategory',
        'income' => 'setIncome',
        'spending' => 'setSpending',
        'balance' => 'setBalance',
        'count_income_transactions' => 'setCountIncomeTransactions',
        'count_spending_transactions' => 'setCountSpendingTransactions',
        'count_all_transactions' => 'setCountAllTransactions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category' => 'getCategory',
        'income' => 'getIncome',
        'spending' => 'getSpending',
        'balance' => 'getBalance',
        'count_income_transactions' => 'getCountIncomeTransactions',
        'count_spending_transactions' => 'getCountSpendingTransactions',
        'count_all_transactions' => 'getCountAllTransactions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['income'] = isset($data['income']) ? $data['income'] : null;
        $this->container['spending'] = isset($data['spending']) ? $data['spending'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['count_income_transactions'] = isset($data['count_income_transactions']) ? $data['count_income_transactions'] : null;
        $this->container['count_spending_transactions'] = isset($data['count_spending_transactions']) ? $data['count_spending_transactions'] : null;
        $this->container['count_all_transactions'] = isset($data['count_all_transactions']) ? $data['count_all_transactions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['income'] === null) {
            $invalidProperties[] = "'income' can't be null";
        }
        if ($this->container['spending'] === null) {
            $invalidProperties[] = "'spending' can't be null";
        }
        if ($this->container['balance'] === null) {
            $invalidProperties[] = "'balance' can't be null";
        }
        if ($this->container['count_income_transactions'] === null) {
            $invalidProperties[] = "'count_income_transactions' can't be null";
        }
        if ($this->container['count_spending_transactions'] === null) {
            $invalidProperties[] = "'count_spending_transactions' can't be null";
        }
        if ($this->container['count_all_transactions'] === null) {
            $invalidProperties[] = "'count_all_transactions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category
     *
     * @return \Swagger\Client\Model\Category
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \Swagger\Client\Model\Category $category Category of this cash flow. When null, then this is the cash flow of transactions that do not have a category.
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets income
     *
     * @return float
     */
    public function getIncome()
    {
        return $this->container['income'];
    }

    /**
     * Sets income
     *
     * @param float $income The total calculated income for the given category
     *
     * @return $this
     */
    public function setIncome($income)
    {
        $this->container['income'] = $income;

        return $this;
    }

    /**
     * Gets spending
     *
     * @return float
     */
    public function getSpending()
    {
        return $this->container['spending'];
    }

    /**
     * Sets spending
     *
     * @param float $spending The total calculated spending for the given category
     *
     * @return $this
     */
    public function setSpending($spending)
    {
        $this->container['spending'] = $spending;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float $balance The calculated balance for the given category
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets count_income_transactions
     *
     * @return int
     */
    public function getCountIncomeTransactions()
    {
        return $this->container['count_income_transactions'];
    }

    /**
     * Sets count_income_transactions
     *
     * @param int $count_income_transactions The total count of income transactions for the given category
     *
     * @return $this
     */
    public function setCountIncomeTransactions($count_income_transactions)
    {
        $this->container['count_income_transactions'] = $count_income_transactions;

        return $this;
    }

    /**
     * Gets count_spending_transactions
     *
     * @return int
     */
    public function getCountSpendingTransactions()
    {
        return $this->container['count_spending_transactions'];
    }

    /**
     * Sets count_spending_transactions
     *
     * @param int $count_spending_transactions The total count of spending transactions for the given category
     *
     * @return $this
     */
    public function setCountSpendingTransactions($count_spending_transactions)
    {
        $this->container['count_spending_transactions'] = $count_spending_transactions;

        return $this;
    }

    /**
     * Gets count_all_transactions
     *
     * @return int
     */
    public function getCountAllTransactions()
    {
        return $this->container['count_all_transactions'];
    }

    /**
     * Sets count_all_transactions
     *
     * @param int $count_all_transactions The total count of all transactions for the given category
     *
     * @return $this
     */
    public function setCountAllTransactions($count_all_transactions)
    {
        $this->container['count_all_transactions'] = $count_all_transactions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


