<?php
/**
 * TppCredentialsParams
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * finAPI RESTful Services
 *
 * finAPI RESTful Services
 *
 * OpenAPI spec version: v1.81.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TppCredentialsParams Class Doc Comment
 *
 * @category Class
 * @description A container for new TPP client credentials data
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TppCredentialsParams implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TppCredentialsParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tpp_authentication_group_id' => 'int',
        'label' => 'string',
        'tpp_client_id' => 'string',
        'tpp_client_secret' => 'string',
        'tpp_api_key' => 'string',
        'valid_from_date' => 'string',
        'valid_until_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tpp_authentication_group_id' => 'int64',
        'label' => null,
        'tpp_client_id' => null,
        'tpp_client_secret' => null,
        'tpp_api_key' => null,
        'valid_from_date' => null,
        'valid_until_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tpp_authentication_group_id' => 'tppAuthenticationGroupId',
        'label' => 'label',
        'tpp_client_id' => 'tppClientId',
        'tpp_client_secret' => 'tppClientSecret',
        'tpp_api_key' => 'tppApiKey',
        'valid_from_date' => 'validFromDate',
        'valid_until_date' => 'validUntilDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tpp_authentication_group_id' => 'setTppAuthenticationGroupId',
        'label' => 'setLabel',
        'tpp_client_id' => 'setTppClientId',
        'tpp_client_secret' => 'setTppClientSecret',
        'tpp_api_key' => 'setTppApiKey',
        'valid_from_date' => 'setValidFromDate',
        'valid_until_date' => 'setValidUntilDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tpp_authentication_group_id' => 'getTppAuthenticationGroupId',
        'label' => 'getLabel',
        'tpp_client_id' => 'getTppClientId',
        'tpp_client_secret' => 'getTppClientSecret',
        'tpp_api_key' => 'getTppApiKey',
        'valid_from_date' => 'getValidFromDate',
        'valid_until_date' => 'getValidUntilDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tpp_authentication_group_id'] = isset($data['tpp_authentication_group_id']) ? $data['tpp_authentication_group_id'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['tpp_client_id'] = isset($data['tpp_client_id']) ? $data['tpp_client_id'] : null;
        $this->container['tpp_client_secret'] = isset($data['tpp_client_secret']) ? $data['tpp_client_secret'] : null;
        $this->container['tpp_api_key'] = isset($data['tpp_api_key']) ? $data['tpp_api_key'] : null;
        $this->container['valid_from_date'] = isset($data['valid_from_date']) ? $data['valid_from_date'] : null;
        $this->container['valid_until_date'] = isset($data['valid_until_date']) ? $data['valid_until_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['tpp_authentication_group_id'] === null) {
            $invalidProperties[] = "'tpp_authentication_group_id' can't be null";
        }
        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tpp_authentication_group_id
     *
     * @return int
     */
    public function getTppAuthenticationGroupId()
    {
        return $this->container['tpp_authentication_group_id'];
    }

    /**
     * Sets tpp_authentication_group_id
     *
     * @param int $tpp_authentication_group_id The TPP Authentication Group Id for which the credentials can be used
     *
     * @return $this
     */
    public function setTppAuthenticationGroupId($tpp_authentication_group_id)
    {
        $this->container['tpp_authentication_group_id'] = $tpp_authentication_group_id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label Optional label to credentials
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets tpp_client_id
     *
     * @return string
     */
    public function getTppClientId()
    {
        return $this->container['tpp_client_id'];
    }

    /**
     * Sets tpp_client_id
     *
     * @param string $tpp_client_id ID of the TPP accessing the ASPSP API, as provided by the ASPSP as the result of registration
     *
     * @return $this
     */
    public function setTppClientId($tpp_client_id)
    {
        $this->container['tpp_client_id'] = $tpp_client_id;

        return $this;
    }

    /**
     * Gets tpp_client_secret
     *
     * @return string
     */
    public function getTppClientSecret()
    {
        return $this->container['tpp_client_secret'];
    }

    /**
     * Sets tpp_client_secret
     *
     * @param string $tpp_client_secret Secret of the TPP accessing the ASPSP API, as provided by the ASPSP as the result of registration
     *
     * @return $this
     */
    public function setTppClientSecret($tpp_client_secret)
    {
        $this->container['tpp_client_secret'] = $tpp_client_secret;

        return $this;
    }

    /**
     * Gets tpp_api_key
     *
     * @return string
     */
    public function getTppApiKey()
    {
        return $this->container['tpp_api_key'];
    }

    /**
     * Sets tpp_api_key
     *
     * @param string $tpp_api_key API Key provided by ASPSP  as the result of registration
     *
     * @return $this
     */
    public function setTppApiKey($tpp_api_key)
    {
        $this->container['tpp_api_key'] = $tpp_api_key;

        return $this;
    }

    /**
     * Gets valid_from_date
     *
     * @return string
     */
    public function getValidFromDate()
    {
        return $this->container['valid_from_date'];
    }

    /**
     * Sets valid_from_date
     *
     * @param string $valid_from_date Credentials \"valid from\" date in the format 'YYYY-MM-DD'. Default is today's date
     *
     * @return $this
     */
    public function setValidFromDate($valid_from_date)
    {
        $this->container['valid_from_date'] = $valid_from_date;

        return $this;
    }

    /**
     * Gets valid_until_date
     *
     * @return string
     */
    public function getValidUntilDate()
    {
        return $this->container['valid_until_date'];
    }

    /**
     * Sets valid_until_date
     *
     * @param string $valid_until_date Credentials \"valid until\" date in the format 'YYYY-MM-DD'. Default is null which means \"indefinite\" (no limit)
     *
     * @return $this
     */
    public function setValidUntilDate($valid_until_date)
    {
        $this->container['valid_until_date'] = $valid_until_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


